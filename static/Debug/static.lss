
static.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00001c10  00001ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000ca  008000ca  00001d0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e8  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b51  00000000  00000000  00002026  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d71  00000000  00000000  00004b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f1d  00000000  00000000  000058e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000078c  00000000  00000000  00006808  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000093c  00000000  00000000  00006f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002019  00000000  00000000  000078d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  000098e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_1>
       8:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__vector_2>
       c:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_5>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_9>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	c8 0a       	sbc	r12, r24
      56:	cf 0a       	sbc	r12, r31
      58:	d6 0a       	sbc	r13, r22
      5a:	dd 0a       	sbc	r13, r29
      5c:	e4 0a       	sbc	r14, r20
      5e:	eb 0a       	sbc	r14, r27
      60:	f2 0a       	sbc	r15, r18

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 e1       	ldi	r30, 0x10	; 16
      76:	fc e1       	ldi	r31, 0x1C	; 28
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	aa 3c       	cpi	r26, 0xCA	; 202
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	aa ec       	ldi	r26, 0xCA	; 202
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a7 30       	cpi	r26, 0x07	; 7
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 2f 0c 	call	0x185e	; 0x185e <main>
      98:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <Car_SM_Init>:
 * -------------- And initiate steering and ultrasonic functions
*/
ERROR_STATUS 
Car_SM_Init(void)
{
	Steering_Init();
      a0:	0e 94 1a 01 	call	0x234	; 0x234 <Steering_Init>
	Us_Init();
      a4:	0e 94 10 05 	call	0xa20	; 0xa20 <Us_Init>
	#if DEBUGTEST
	LCD_init();
      a8:	0e 94 94 03 	call	0x728	; 0x728 <LCD_init>
	#endif
	return E_OK;
}
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	08 95       	ret

000000b0 <Car_SM_Update>:
 * Description--: changes car state according to the ultrasonic input
 * -------------- And represents the motors output for each state
*/
ERROR_STATUS 
Car_SM_Update(void)
{
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	62 97       	sbiw	r28, 0x12	; 18
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
	uint16 u16_distance = ZERO_INITIALIZATION;
      c4:	1a 82       	std	Y+2, r1	; 0x02
      c6:	19 82       	std	Y+1, r1	; 0x01
	#if DEBUGTEST
	char lcd_buffer[16];
	LCD_goto_xy(ZERO_INITIALIZATION, ZERO_INITIALIZATION);
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
	#endif
	Us_Trigger();
      d0:	0e 94 42 05 	call	0xa84	; 0xa84 <Us_Trigger>
	Us_GetDistance(&u16_distance);
      d4:	ce 01       	movw	r24, r28
      d6:	01 96       	adiw	r24, 0x01	; 1
      d8:	0e 94 66 05 	call	0xacc	; 0xacc <Us_GetDistance>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
      dc:	4a e0       	ldi	r20, 0x0A	; 10
      de:	be 01       	movw	r22, r28
      e0:	6d 5f       	subi	r22, 0xFD	; 253
      e2:	7f 4f       	sbci	r23, 0xFF	; 255
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	9a 81       	ldd	r25, Y+2	; 0x02
      e8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__itoa_ncheck>
	#if DEBUGTEST
	itoa(u16_distance,lcd_buffer,10);
	LCD_send_string(lcd_buffer);
      ec:	ce 01       	movw	r24, r28
      ee:	03 96       	adiw	r24, 0x03	; 3
      f0:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
	#endif
	
	
	
	
	if (u16_distance > DISTANCE_FIFTY)
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	83 33       	cpi	r24, 0x33	; 51
      fa:	91 05       	cpc	r25, r1
      fc:	80 f0       	brcs	.+32     	; 0x11e <Car_SM_Update+0x6e>
	{
		Steering_SteerCar(CAR_FORWARD, SPEED_EIGHTY);
      fe:	62 e3       	ldi	r22, 0x32	; 50
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	0e 94 32 01 	call	0x264	; 0x264 <Steering_SteerCar>
		gsu8_CAR_state = SM_FORWARD80;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	80 93 ca 00 	sts	0x00CA, r24
		#if DEBUGTEST
		LCD_goto_xy(ZERO_INITIALIZATION, ONE_INITIALIZATION);
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
		LCD_send_string("FORWARD80");
     114:	81 e7       	ldi	r24, 0x71	; 113
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
     11c:	7f c0       	rjmp	.+254    	; 0x21c <Car_SM_Update+0x16c>
		#endif
	} 
	else if(u16_distance > DISTANCE_THIRTY)
     11e:	8f 31       	cpi	r24, 0x1F	; 31
     120:	91 05       	cpc	r25, r1
     122:	60 f1       	brcs	.+88     	; 0x17c <Car_SM_Update+0xcc>
	{
		if(gsu8_CAR_state == SM_BACKWARD || gsu8_CAR_state == SM_STOP)
     124:	80 91 ca 00 	lds	r24, 0x00CA
     128:	83 30       	cpi	r24, 0x03	; 3
     12a:	11 f0       	breq	.+4      	; 0x130 <Car_SM_Update+0x80>
     12c:	81 11       	cpse	r24, r1
     12e:	16 c0       	rjmp	.+44     	; 0x15c <Car_SM_Update+0xac>
		{
			Steering_SteerCar(CAR_RIGHT, SPEED_THIRTY);
     130:	6e e1       	ldi	r22, 0x1E	; 30
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 32 01 	call	0x264	; 0x264 <Steering_SteerCar>
			#if DEBUGTEST
			LCD_goto_xy(ZERO_INITIALIZATION, ONE_INITIALIZATION);
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
			LCD_send_string("RIGHT");
     140:	8b e7       	ldi	r24, 0x7B	; 123
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
			#endif
			SwDelay_ms(1000);
     148:	68 ee       	ldi	r22, 0xE8	; 232
     14a:	73 e0       	ldi	r23, 0x03	; 3
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
			gsu8_CAR_state = SM_RIGHT;
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	80 93 ca 00 	sts	0x00CA, r24
     15a:	60 c0       	rjmp	.+192    	; 0x21c <Car_SM_Update+0x16c>
		}
		else
		{
			Steering_SteerCar(CAR_FORWARD, SPEED_THIRTY);
     15c:	6e e1       	ldi	r22, 0x1E	; 30
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 32 01 	call	0x264	; 0x264 <Steering_SteerCar>
			gsu8_CAR_state = SM_FORWARD30;
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	80 93 ca 00 	sts	0x00CA, r24
			#if DEBUGTEST
			LCD_goto_xy(ZERO_INITIALIZATION, ONE_INITIALIZATION);
     16a:	61 e0       	ldi	r22, 0x01	; 1
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
			LCD_send_string("FORWARD30");
     172:	81 e8       	ldi	r24, 0x81	; 129
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
     17a:	50 c0       	rjmp	.+160    	; 0x21c <Car_SM_Update+0x16c>
			#endif
		}
	}
	else if (u16_distance == DISTANCE_THIRTY)
     17c:	8e 31       	cpi	r24, 0x1E	; 30
     17e:	91 05       	cpc	r25, r1
     180:	49 f5       	brne	.+82     	; 0x1d4 <Car_SM_Update+0x124>
	{
		if (gsu8_CAR_state == SM_STOP)
     182:	80 91 ca 00 	lds	r24, 0x00CA
     186:	81 11       	cpse	r24, r1
     188:	16 c0       	rjmp	.+44     	; 0x1b6 <Car_SM_Update+0x106>
		{
			Steering_SteerCar(CAR_RIGHT, SPEED_THIRTY);
     18a:	6e e1       	ldi	r22, 0x1E	; 30
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	0e 94 32 01 	call	0x264	; 0x264 <Steering_SteerCar>
			#if DEBUGTEST
			LCD_goto_xy(ZERO_INITIALIZATION, ONE_INITIALIZATION);
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
			LCD_send_string("RIGHT");
     19a:	8b e7       	ldi	r24, 0x7B	; 123
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
			#endif
			SwDelay_ms(1000);
     1a2:	68 ee       	ldi	r22, 0xE8	; 232
     1a4:	73 e0       	ldi	r23, 0x03	; 3
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
			gsu8_CAR_state = SM_RIGHT;
     1ae:	84 e0       	ldi	r24, 0x04	; 4
     1b0:	80 93 ca 00 	sts	0x00CA, r24
     1b4:	33 c0       	rjmp	.+102    	; 0x21c <Car_SM_Update+0x16c>
		} 
		else
		{
			Steering_SteerCar(CAR_FORWARD, SPEED_ZERO);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 32 01 	call	0x264	; 0x264 <Steering_SteerCar>
			#if DEBUGTEST
			LCD_goto_xy(ZERO_INITIALIZATION, ONE_INITIALIZATION);
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
			LCD_send_string("STOP");
     1c6:	8b e8       	ldi	r24, 0x8B	; 139
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
			#endif
			//SwDelay_ms(100);
			gsu8_CAR_state = SM_STOP;
     1ce:	10 92 ca 00 	sts	0x00CA, r1
     1d2:	24 c0       	rjmp	.+72     	; 0x21c <Car_SM_Update+0x16c>
		}
	} 
	else if(u16_distance < DISTANCE_THIRTY)
     1d4:	4e 97       	sbiw	r24, 0x1e	; 30
     1d6:	10 f5       	brcc	.+68     	; 0x21c <Car_SM_Update+0x16c>
	{
		if(gsu8_CAR_state == SM_STOP)
     1d8:	80 91 ca 00 	lds	r24, 0x00CA
     1dc:	81 11       	cpse	r24, r1
     1de:	10 c0       	rjmp	.+32     	; 0x200 <Car_SM_Update+0x150>
		{
			Steering_SteerCar(CAR_BACKWARD, SPEED_THIRTY);
     1e0:	6e e1       	ldi	r22, 0x1E	; 30
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	0e 94 32 01 	call	0x264	; 0x264 <Steering_SteerCar>
			#if DEBUGTEST
			LCD_goto_xy(ZERO_INITIALIZATION, ONE_INITIALIZATION);
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
			LCD_send_string("BACKWARD");
     1f0:	80 e9       	ldi	r24, 0x90	; 144
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
			#endif
			//SwDelay_ms(1000);
			gsu8_CAR_state = SM_BACKWARD;
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	80 93 ca 00 	sts	0x00CA, r24
     1fe:	0e c0       	rjmp	.+28     	; 0x21c <Car_SM_Update+0x16c>
		}
		else
		{
			Steering_SteerCar(CAR_FORWARD, SPEED_ZERO);
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 32 01 	call	0x264	; 0x264 <Steering_SteerCar>
			#if DEBUGTEST
			LCD_goto_xy(ZERO_INITIALIZATION, ONE_INITIALIZATION);
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_goto_xy>
			LCD_send_string("STOP");
     210:	8b e8       	ldi	r24, 0x8B	; 139
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_send_string>
			#endif
			//SwDelay_ms(100);
			gsu8_CAR_state = SM_STOP;
     218:	10 92 ca 00 	sts	0x00CA, r1
		}
	}
	//SwDelay_ms(500);
	LCD_clear();
     21c:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_clear>
	return E_OK;
}
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	62 96       	adiw	r28, 0x12	; 18
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <Steering_Init>:
 */

ERROR_STATUS 
Steering_Init(void)
{
	Motor_Init(MOTOR_1);
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Motor_Init>
	Motor_Init(MOTOR_2);
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Motor_Init>
	Motor_Direction(MOTOR_1, MOTOR_FORWARD);
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
	Motor_Direction(MOTOR_2, MOTOR_FORWARD);
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
	Motor_Start(MOTOR_1, ZERO_INITIALIZATION);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 9d 04 	call	0x93a	; 0x93a <Motor_Start>
	Motor_Start(MOTOR_2, ZERO_INITIALIZATION);
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 9d 04 	call	0x93a	; 0x93a <Motor_Start>
	return E_OK;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <Steering_SteerCar>:
 * Description: This funtion controls the command and the speed of the car.
 * 							
 */
ERROR_STATUS 
Steering_SteerCar(uint8 Steering_CarCmd, uint8 speed)
{
     264:	cf 93       	push	r28
     266:	c6 2f       	mov	r28, r22
	switch(Steering_CarCmd)
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	31 f1       	breq	.+76     	; 0x2b8 <Steering_SteerCar+0x54>
     26c:	28 f4       	brcc	.+10     	; 0x278 <Steering_SteerCar+0x14>
     26e:	88 23       	and	r24, r24
     270:	49 f0       	breq	.+18     	; 0x284 <Steering_SteerCar+0x20>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	79 f0       	breq	.+30     	; 0x294 <Steering_SteerCar+0x30>
     276:	56 c0       	rjmp	.+172    	; 0x324 <Steering_SteerCar+0xc0>
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	81 f1       	breq	.+96     	; 0x2dc <Steering_SteerCar+0x78>
     27c:	84 30       	cpi	r24, 0x04	; 4
     27e:	09 f4       	brne	.+2      	; 0x282 <Steering_SteerCar+0x1e>
     280:	3f c0       	rjmp	.+126    	; 0x300 <Steering_SteerCar+0x9c>
     282:	50 c0       	rjmp	.+160    	; 0x324 <Steering_SteerCar+0xc0>
	{
		case CAR_STOP:
			Motor_Stop(MOTOR_1);
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 d7 04 	call	0x9ae	; 0x9ae <Motor_Stop>
			Motor_Stop(MOTOR_2);
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <Motor_Stop>
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;	
		default:
			return E_NOK;
	}
	return E_OK;
     290:	80 e0       	ldi	r24, 0x00	; 0
	switch(Steering_CarCmd)
	{
		case CAR_STOP:
			Motor_Stop(MOTOR_1);
			Motor_Stop(MOTOR_2);
			break;
     292:	49 c0       	rjmp	.+146    	; 0x326 <Steering_SteerCar+0xc2>
		case CAR_FORWARD:
			Motor_Direction(MOTOR_1, MOTOR_FORWARD);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_Direction(MOTOR_2, MOTOR_FORWARD);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_SpeedUpdate(MOTOR_1, speed);
     2a4:	6c 2f       	mov	r22, r28
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			Motor_SpeedUpdate(MOTOR_2, speed);
     2ac:	6c 2f       	mov	r22, r28
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;	
		default:
			return E_NOK;
	}
	return E_OK;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
		case CAR_FORWARD:
			Motor_Direction(MOTOR_1, MOTOR_FORWARD);
			Motor_Direction(MOTOR_2, MOTOR_FORWARD);
			Motor_SpeedUpdate(MOTOR_1, speed);
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;
     2b6:	37 c0       	rjmp	.+110    	; 0x326 <Steering_SteerCar+0xc2>
		case CAR_BACKWARD:
			Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
     2b8:	62 e0       	ldi	r22, 0x02	; 2
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_SpeedUpdate(MOTOR_1, speed);
     2c8:	6c 2f       	mov	r22, r28
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			Motor_SpeedUpdate(MOTOR_2, speed);
     2d0:	6c 2f       	mov	r22, r28
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;	
		default:
			return E_NOK;
	}
	return E_OK;
     2d8:	80 e0       	ldi	r24, 0x00	; 0
		case CAR_BACKWARD:
			Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
			Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
			Motor_SpeedUpdate(MOTOR_1, speed);
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;
     2da:	25 c0       	rjmp	.+74     	; 0x326 <Steering_SteerCar+0xc2>
		case CAR_RIGHT:
			Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
     2dc:	62 e0       	ldi	r22, 0x02	; 2
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_Direction(MOTOR_2, MOTOR_FORWARD);
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_SpeedUpdate(MOTOR_1, speed);
     2ec:	6c 2f       	mov	r22, r28
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			Motor_SpeedUpdate(MOTOR_2, speed);
     2f4:	6c 2f       	mov	r22, r28
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;	
		default:
			return E_NOK;
	}
	return E_OK;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
		case CAR_RIGHT:
			Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
			Motor_Direction(MOTOR_2, MOTOR_FORWARD);
			Motor_SpeedUpdate(MOTOR_1, speed);
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;	
     2fe:	13 c0       	rjmp	.+38     	; 0x326 <Steering_SteerCar+0xc2>
		case CAR_LEFT:
			Motor_Direction(MOTOR_1, MOTOR_FORWARD);
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
     308:	62 e0       	ldi	r22, 0x02	; 2
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
			Motor_SpeedUpdate(MOTOR_1, speed);
     310:	6c 2f       	mov	r22, r28
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			Motor_SpeedUpdate(MOTOR_2, speed);
     318:	6c 2f       	mov	r22, r28
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	0e 94 ba 04 	call	0x974	; 0x974 <Motor_SpeedUpdate>
			break;	
		default:
			return E_NOK;
	}
	return E_OK;
     320:	80 e0       	ldi	r24, 0x00	; 0
		case CAR_LEFT:
			Motor_Direction(MOTOR_1, MOTOR_FORWARD);
			Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
			Motor_SpeedUpdate(MOTOR_1, speed);
			Motor_SpeedUpdate(MOTOR_2, speed);
			break;	
     322:	01 c0       	rjmp	.+2      	; 0x326 <Steering_SteerCar+0xc2>
		default:
			return E_NOK;
     324:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;
}
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <EXT_INT0_CBK>:



void 
EXT_INT0_CBK(void)
{
     32a:	08 95       	ret

0000032c <EXT_INT1_CBK>:
	
}

void 
EXT_INT1_CBK(void)
{
     32c:	08 95       	ret

0000032e <TIMER0_CBK>:
				
}

void 
TIMER0_CBK(void)
{
     32e:	08 95       	ret

00000330 <TIMER1_CBK>:
	
}

void 
TIMER1_CBK(void)
{
     330:	08 95       	ret

00000332 <TIMER2_CBK>:
}

void 
TIMER2_CBK(void)
{
	gsu16_OVFCount[ICU_TIMER_CH2]++;
     332:	ee ed       	ldi	r30, 0xDE	; 222
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	91 83       	std	Z+1, r25	; 0x01
     33e:	80 83       	st	Z, r24
	#if DEBUGTEST
	DIO_Write(GPIOB, BIT7, HIGH);
     340:	4f ef       	ldi	r20, 0xFF	; 255
     342:	60 e8       	ldi	r22, 0x80	; 128
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
     34a:	08 95       	ret

0000034c <EXT_INT2_CBK>:
	
}

void 
EXT_INT2_CBK(void)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <EXT_INT2_CBK+0x6>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	if (gsu8_INTEdgeFlag[EXTRN_INT_2] == RISING_EDGE)
     356:	80 91 62 00 	lds	r24, 0x0062
     35a:	83 30       	cpi	r24, 0x03	; 3
     35c:	b1 f4       	brne	.+44     	; 0x38a <EXT_INT2_CBK+0x3e>
	{
		gsu16_OVFCount[ICU_TIMER_CH2] = ZERO_INITIALIZATION;
     35e:	10 92 df 00 	sts	0x00DF, r1
     362:	10 92 de 00 	sts	0x00DE, r1
		Timer_Start(gsu8_TimerCH[ICU_CH2],TCNT2_MAX);
     366:	6f ef       	ldi	r22, 0xFF	; 255
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	0e 94 07 0b 	call	0x160e	; 0x160e <Timer_Start>
		ExternInt_SetEvent(EXTRN_INT_2, FALLING_EDGE);
     370:	62 e0       	ldi	r22, 0x02	; 2
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	0e 94 a9 06 	call	0xd52	; 0xd52 <ExternInt_SetEvent>
		gsu8_INTEdgeFlag[EXTRN_INT_2] = FALLING_EDGE;
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	80 93 62 00 	sts	0x0062, r24
		#if DEBUGTEST
		DIO_Write(GPIOB, BIT5, HIGH);
     37e:	4f ef       	ldi	r20, 0xFF	; 255
     380:	60 e2       	ldi	r22, 0x20	; 32
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
     388:	46 c0       	rjmp	.+140    	; 0x416 <EXT_INT2_CBK+0xca>
		#endif
	} 
	else if(gsu8_INTEdgeFlag[EXTRN_INT_2] == FALLING_EDGE)
     38a:	82 30       	cpi	r24, 0x02	; 2
     38c:	09 f0       	breq	.+2      	; 0x390 <EXT_INT2_CBK+0x44>
     38e:	43 c0       	rjmp	.+134    	; 0x416 <EXT_INT2_CBK+0xca>
	{
		Timer_Stop(gsu8_TimerCH[ICU_CH2]);
     390:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Timer_Stop>
		uint16 u16_timerCount = ZERO_INITIALIZATION; 
     394:	1a 82       	std	Y+2, r1	; 0x02
     396:	19 82       	std	Y+1, r1	; 0x01
		Timer_GetValue(gsu8_TimerCH[ICU_CH2], &u16_timerCount);
     398:	be 01       	movw	r22, r28
     39a:	6f 5f       	subi	r22, 0xFF	; 255
     39c:	7f 4f       	sbci	r23, 0xFF	; 255
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	0e 94 90 0b 	call	0x1720	; 0x1720 <Timer_GetValue>
		if (gsu16_OVFCount[gsu8_TimerCH[ICU_CH2]] > 220)
     3a4:	80 91 de 00 	lds	r24, 0x00DE
     3a8:	90 91 df 00 	lds	r25, 0x00DF
     3ac:	8d 3d       	cpi	r24, 0xDD	; 221
     3ae:	91 05       	cpc	r25, r1
     3b0:	68 f0       	brcs	.+26     	; 0x3cc <EXT_INT2_CBK+0x80>
		{
			gsu32_Time[gsu8_TimerCH[ICU_CH2]] = (MAX_OVF_COUNT * TCNT2_MAX) / CONVERSION_CONSTANT_FROM_SECOND_TO_MICROSECOND;
     3b2:	82 eb       	ldi	r24, 0xB2	; 178
     3b4:	9d e0       	ldi	r25, 0x0D	; 13
     3b6:	a0 e0       	ldi	r26, 0x00	; 0
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	80 93 d6 00 	sts	0x00D6, r24
     3be:	90 93 d7 00 	sts	0x00D7, r25
     3c2:	a0 93 d8 00 	sts	0x00D8, r26
     3c6:	b0 93 d9 00 	sts	0x00D9, r27
     3ca:	1e c0       	rjmp	.+60     	; 0x408 <EXT_INT2_CBK+0xbc>

		}
		else
		{
			gsu32_Time[gsu8_TimerCH[ICU_CH2]] = (gsu16_OVFCount[gsu8_TimerCH[ICU_CH2]] * TCNT2_MAX + u16_timerCount) / CONVERSION_CONSTANT_FROM_SECOND_TO_MICROSECOND;
     3cc:	80 91 de 00 	lds	r24, 0x00DE
     3d0:	90 91 df 00 	lds	r25, 0x00DF
     3d4:	4f ef       	ldi	r20, 0xFF	; 255
     3d6:	48 9f       	mul	r20, r24
     3d8:	90 01       	movw	r18, r0
     3da:	49 9f       	mul	r20, r25
     3dc:	30 0d       	add	r19, r0
     3de:	11 24       	eor	r1, r1
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	82 0f       	add	r24, r18
     3e6:	93 1f       	adc	r25, r19
     3e8:	92 95       	swap	r25
     3ea:	82 95       	swap	r24
     3ec:	8f 70       	andi	r24, 0x0F	; 15
     3ee:	89 27       	eor	r24, r25
     3f0:	9f 70       	andi	r25, 0x0F	; 15
     3f2:	89 27       	eor	r24, r25
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	80 93 d6 00 	sts	0x00D6, r24
     3fc:	90 93 d7 00 	sts	0x00D7, r25
     400:	a0 93 d8 00 	sts	0x00D8, r26
     404:	b0 93 d9 00 	sts	0x00D9, r27

		}
		gsu8_INTFinishedFlag[ICU_CH2] = ONE_INITIALIZATION;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 cd 00 	sts	0x00CD, r24
		#if DEBUGTEST
		DIO_Write(GPIOB, BIT6, HIGH);
     40e:	4f ef       	ldi	r20, 0xFF	; 255
     410:	60 e4       	ldi	r22, 0x40	; 64
     412:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
		#endif
	}
	
				
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <Icu_Init>:
 * Description  : Initializes the ICU by initializing the timer			  *
 * 				  and enabling the global interrupt						  *
 **************************************************************************/
ERROR_STATUS 
Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	2a 97       	sbiw	r28, 0x0a	; 10
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	8c 01       	movw	r16, r24
	if (NULL == Icu_Cfg)
     43a:	00 97       	sbiw	r24, 0x00	; 0
     43c:	09 f4       	brne	.+2      	; 0x440 <Icu_Init+0x20>
     43e:	79 c0       	rjmp	.+242    	; 0x532 <Icu_Init+0x112>
	} 
	else
	{
		ExternInt_Cfg_s ExtInt_info;
		Timer_cfg_s Timer_info;
		switch(Icu_Cfg->ICU_Ch_No)
     440:	dc 01       	movw	r26, r24
     442:	8c 91       	ld	r24, X
     444:	81 30       	cpi	r24, 0x01	; 1
     446:	89 f0       	breq	.+34     	; 0x46a <Icu_Init+0x4a>
     448:	18 f0       	brcs	.+6      	; 0x450 <Icu_Init+0x30>
     44a:	82 30       	cpi	r24, 0x02	; 2
     44c:	e1 f0       	breq	.+56     	; 0x486 <Icu_Init+0x66>
     44e:	6f c0       	rjmp	.+222    	; 0x52e <Icu_Init+0x10e>
		{
			case ICU_CH0:
				ExtInt_info.ExternInt_No = EXTRN_INT_0;
     450:	1f 82       	std	Y+7, r1	; 0x07
				ExtInt_info.ExternInt_CBF_Ptr = EXT_INT0_CBK;
     452:	85 e9       	ldi	r24, 0x95	; 149
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9a 87       	std	Y+10, r25	; 0x0a
     458:	89 87       	std	Y+9, r24	; 0x09
				ExtInt_info.ExternInt_Event = gsu8_INTEdgeFlag[ICU_CH0];
     45a:	80 91 60 00 	lds	r24, 0x0060
     45e:	88 87       	std	Y+8, r24	; 0x08
				ExternInt_Init(&ExtInt_info);
     460:	ce 01       	movw	r24, r28
     462:	07 96       	adiw	r24, 0x07	; 7
     464:	0e 94 34 06 	call	0xc68	; 0xc68 <ExternInt_Init>
				break;
     468:	1b c0       	rjmp	.+54     	; 0x4a0 <Icu_Init+0x80>
			case ICU_CH1:
				ExtInt_info.ExternInt_No = EXTRN_INT_1;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	8f 83       	std	Y+7, r24	; 0x07
				ExtInt_info.ExternInt_CBF_Ptr = EXT_INT1_CBK;
     46e:	86 e9       	ldi	r24, 0x96	; 150
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9a 87       	std	Y+10, r25	; 0x0a
     474:	89 87       	std	Y+9, r24	; 0x09
				ExtInt_info.ExternInt_Event = gsu8_INTEdgeFlag[ICU_CH1];
     476:	80 91 61 00 	lds	r24, 0x0061
     47a:	88 87       	std	Y+8, r24	; 0x08
				ExternInt_Init(&ExtInt_info);
     47c:	ce 01       	movw	r24, r28
     47e:	07 96       	adiw	r24, 0x07	; 7
     480:	0e 94 34 06 	call	0xc68	; 0xc68 <ExternInt_Init>
				break;
     484:	0d c0       	rjmp	.+26     	; 0x4a0 <Icu_Init+0x80>
			case ICU_CH2:
				ExtInt_info.ExternInt_No = EXTRN_INT_2;
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	8f 83       	std	Y+7, r24	; 0x07
				ExtInt_info.ExternInt_CBF_Ptr = EXT_INT2_CBK;
     48a:	86 ea       	ldi	r24, 0xA6	; 166
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	9a 87       	std	Y+10, r25	; 0x0a
     490:	89 87       	std	Y+9, r24	; 0x09
				ExtInt_info.ExternInt_Event = gsu8_INTEdgeFlag[ICU_CH2];
     492:	80 91 62 00 	lds	r24, 0x0062
     496:	88 87       	std	Y+8, r24	; 0x08
				ExternInt_Init(&ExtInt_info);
     498:	ce 01       	movw	r24, r28
     49a:	07 96       	adiw	r24, 0x07	; 7
     49c:	0e 94 34 06 	call	0xc68	; 0xc68 <ExternInt_Init>
				break;
			default:
				return E_NOK;	
		}
		switch(Icu_Cfg->ICU_Ch_Timer)
     4a0:	f8 01       	movw	r30, r16
     4a2:	81 81       	ldd	r24, Z+1	; 0x01
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	c9 f0       	breq	.+50     	; 0x4da <Icu_Init+0xba>
     4a8:	18 f0       	brcs	.+6      	; 0x4b0 <Icu_Init+0x90>
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	59 f1       	breq	.+86     	; 0x504 <Icu_Init+0xe4>
     4ae:	3f c0       	rjmp	.+126    	; 0x52e <Icu_Init+0x10e>
		{
			case ICU_TIMER_CH0:
				gsu8_TimerMode[Icu_Cfg->ICU_Ch_No] = TIMER_CH0;
     4b0:	e0 81       	ld	r30, Z
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	e0 52       	subi	r30, 0x20	; 32
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	10 82       	st	Z, r1
				Timer_info.Timer_CH_NO = gsu8_TimerCH[ICU_TIMER_CH0];
     4ba:	19 82       	std	Y+1, r1	; 0x01
				Timer_info.Timer_Mode = gsu8_TimerMode[ICU_TIMER_CH0];
     4bc:	80 91 e0 00 	lds	r24, 0x00E0
     4c0:	8a 83       	std	Y+2, r24	; 0x02
				Timer_info.Timer_Polling_Or_Interrupt = gsu8_TimerPollingOrInterrupt[ICU_TIMER_CH0];
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	8b 83       	std	Y+3, r24	; 0x03
				Timer_info.Timer_Prescaler = gsu8_TimerPrescaler[ICU_TIMER_CH0];
     4c6:	8c 83       	std	Y+4, r24	; 0x04
				Timer_info.Timer_Cbk_ptr = TIMER0_CBK;
     4c8:	87 e9       	ldi	r24, 0x97	; 151
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	9e 83       	std	Y+6, r25	; 0x06
     4ce:	8d 83       	std	Y+5, r24	; 0x05
				Timer_Init(&Timer_info);
     4d0:	ce 01       	movw	r24, r28
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <Timer_Init>
				break;
     4d8:	28 c0       	rjmp	.+80     	; 0x52a <Icu_Init+0x10a>
			case ICU_TIMER_CH1:
				gsu8_TimerMode[Icu_Cfg->ICU_Ch_No] = TIMER_CH1;
     4da:	e0 81       	ld	r30, Z
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	e0 52       	subi	r30, 0x20	; 32
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 83       	st	Z, r24
				Timer_info.Timer_CH_NO = gsu8_TimerCH[ICU_TIMER_CH1];
     4e6:	89 83       	std	Y+1, r24	; 0x01
				Timer_info.Timer_Mode = gsu8_TimerMode[ICU_TIMER_CH1];
     4e8:	90 91 e1 00 	lds	r25, 0x00E1
     4ec:	9a 83       	std	Y+2, r25	; 0x02
				Timer_info.Timer_Polling_Or_Interrupt = gsu8_TimerPollingOrInterrupt[ICU_TIMER_CH1];
     4ee:	8b 83       	std	Y+3, r24	; 0x03
				Timer_info.Timer_Prescaler = gsu8_TimerPrescaler[ICU_TIMER_CH1];
     4f0:	8c 83       	std	Y+4, r24	; 0x04
				Timer_info.Timer_Cbk_ptr = TIMER1_CBK;
     4f2:	88 e9       	ldi	r24, 0x98	; 152
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	9e 83       	std	Y+6, r25	; 0x06
     4f8:	8d 83       	std	Y+5, r24	; 0x05
				Timer_Init(&Timer_info);
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <Timer_Init>
				break;
     502:	13 c0       	rjmp	.+38     	; 0x52a <Icu_Init+0x10a>
			case ICU_TIMER_CH2:
				gsu8_TimerMode[Icu_Cfg->ICU_Ch_No] = TIMER_CH2;
     504:	e0 81       	ld	r30, Z
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	e0 52       	subi	r30, 0x20	; 32
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	80 83       	st	Z, r24
				Timer_info.Timer_CH_NO = /*gsu8_TimerCH[ICU_TIMER_CH2]*/TIMER_CH2;
     510:	89 83       	std	Y+1, r24	; 0x01
				Timer_info.Timer_Mode = /*gsu8_TimerMode[ICU_TIMER_CH2]*/TIMER_MODE;
     512:	1a 82       	std	Y+2, r1	; 0x02
				Timer_info.Timer_Polling_Or_Interrupt = /*gsu8_TimerPollingOrInterrupt[ICU_TIMER_CH2]*/TIMER_INTERRUPT_MODE;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	8b 83       	std	Y+3, r24	; 0x03
				Timer_info.Timer_Prescaler = /*gsu8_TimerPrescaler[ICU_TIMER_CH2]*/TIMER_PRESCALER_NO;
     518:	8c 83       	std	Y+4, r24	; 0x04
				Timer_info.Timer_Cbk_ptr = TIMER2_CBK;
     51a:	89 e9       	ldi	r24, 0x99	; 153
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	9e 83       	std	Y+6, r25	; 0x06
     520:	8d 83       	std	Y+5, r24	; 0x05
				Timer_Init(&Timer_info);
     522:	ce 01       	movw	r24, r28
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <Timer_Init>
				break;
			default:
				return E_NOK;	
		}
	}
	return E_OK;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	03 c0       	rjmp	.+6      	; 0x534 <Icu_Init+0x114>
				ExtInt_info.ExternInt_CBF_Ptr = EXT_INT2_CBK;
				ExtInt_info.ExternInt_Event = gsu8_INTEdgeFlag[ICU_CH2];
				ExternInt_Init(&ExtInt_info);
				break;
			default:
				return E_NOK;	
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	01 c0       	rjmp	.+2      	; 0x534 <Icu_Init+0x114>
ERROR_STATUS 
Icu_Init(Icu_cfg_s * Icu_Cfg)
{
	if (NULL == Icu_Cfg)
	{
		return E_NOK;
     532:	81 e0       	ldi	r24, 0x01	; 1
			default:
				return E_NOK;	
		}
	}
	return E_OK;
}
     534:	2a 96       	adiw	r28, 0x0a	; 10
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <Icu_ReadTime>:
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/
ERROR_STATUS 
Icu_ReadTime(uint8 Icu_Channel, uint8 Icu_EdgeToEdge, uint32 * Icu_Time)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ea 01       	movw	r28, r20
	switch(Icu_Channel)
     550:	82 30       	cpi	r24, 0x02	; 2
     552:	f1 f4       	brne	.+60     	; 0x590 <Icu_ReadTime+0x46>
	{
		case ICU_CH2:
			switch(Icu_EdgeToEdge)
     554:	61 30       	cpi	r22, 0x01	; 1
     556:	e1 f4       	brne	.+56     	; 0x590 <Icu_ReadTime+0x46>
			{
				case ICU_RISE_TO_FALL:
					ExternInt_SetEvent(EXTRN_INT_2, RISING_EDGE);
     558:	63 e0       	ldi	r22, 0x03	; 3
     55a:	0e 94 a9 06 	call	0xd52	; 0xd52 <ExternInt_SetEvent>
					gsu8_INTEdgeFlag[EXTRN_INT_2] = RISING_EDGE;	
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	80 93 62 00 	sts	0x0062, r24
					ExternInt_Enable(EXTRN_INT_2);
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	0e 94 04 07 	call	0xe08	; 0xe08 <ExternInt_Enable>
					while(!gsu8_INTFinishedFlag[EXTRN_INT_2]);
     56a:	ed ec       	ldi	r30, 0xCD	; 205
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	88 23       	and	r24, r24
     572:	e9 f3       	breq	.-6      	; 0x56e <Icu_ReadTime+0x24>
					*Icu_Time = gsu32_Time[EXTRN_INT_2];
     574:	80 91 d6 00 	lds	r24, 0x00D6
     578:	90 91 d7 00 	lds	r25, 0x00D7
     57c:	a0 91 d8 00 	lds	r26, 0x00D8
     580:	b0 91 d9 00 	lds	r27, 0x00D9
     584:	88 83       	st	Y, r24
     586:	99 83       	std	Y+1, r25	; 0x01
     588:	aa 83       	std	Y+2, r26	; 0x02
     58a:	bb 83       	std	Y+3, r27	; 0x03
					gsu8_INTFinishedFlag[EXTRN_INT_2] = ZERO_INITIALIZATION;
     58c:	10 92 cd 00 	sts	0x00CD, r1
					break;
			}
	}
	return E_OK;
}
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <LCD_EN_pulse>:
#include "Char_lcd.h"
#include "softwareDelay.h"
#include "DIO.h"

void LCD_EN_pulse(void){
	DIO_Write(LCD_EN_PORT, LCD_EN_PIN, HIGH);
     598:	4f ef       	ldi	r20, 0xFF	; 255
     59a:	68 e0       	ldi	r22, 0x08	; 8
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
	SwDelay_ms(1);
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
	DIO_Write(LCD_EN_PORT, LCD_EN_PIN, LOW);
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	68 e0       	ldi	r22, 0x08	; 8
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
	SwDelay_ms(1);
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
     5c4:	08 95       	ret

000005c6 <LCD_config_pins>:
}

void LCD_config_pins(void){
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <LCD_config_pins+0x6>
     5cc:	1f 92       	push	r1
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62

	/* set LCD pins as outputs */
	DIO_Cfg_s ST_dio = {0};
     5d2:	19 82       	std	Y+1, r1	; 0x01
     5d4:	1a 82       	std	Y+2, r1	; 0x02
     5d6:	1b 82       	std	Y+3, r1	; 0x03
	ST_dio.GPIO = LCD_RS_PORT;
	ST_dio.dir = OUTPUT;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	8b 83       	std	Y+3, r24	; 0x03
	ST_dio.pins = LCD_RS_PIN;
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>

	ST_dio.GPIO = LCD_RW_PORT;
     5e8:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_RW_PIN;
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>

	ST_dio.GPIO = LCD_EN_PORT;
     5f6:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_EN_PIN;
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
     5fc:	ce 01       	movw	r24, r28
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>

	ST_dio.GPIO = LCD_D4_PORT;
     604:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D4_PIN;
     606:	80 e1       	ldi	r24, 0x10	; 16
     608:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>

	ST_dio.GPIO = LCD_D5_PORT;
     612:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D5_PIN;
     614:	80 e2       	ldi	r24, 0x20	; 32
     616:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
     618:	ce 01       	movw	r24, r28
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>

	ST_dio.GPIO = LCD_D6_PORT;
     620:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D6_PIN;
     622:	80 e4       	ldi	r24, 0x40	; 64
     624:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
     626:	ce 01       	movw	r24, r28
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>

	ST_dio.GPIO = LCD_D7_PORT;
     62e:	19 82       	std	Y+1, r1	; 0x01
	ST_dio.pins = LCD_D7_PIN;
     630:	80 e8       	ldi	r24, 0x80	; 128
     632:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&ST_dio);
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <LCD_send_nibble>:

void LCD_send_nibble(uint8 data){
     648:	cf 93       	push	r28
	uint8 mask = 1;
	data >>= 4;
     64a:	c8 2f       	mov	r28, r24
     64c:	c2 95       	swap	r28
     64e:	cf 70       	andi	r28, 0x0F	; 15
	if(data&mask)
     650:	c0 ff       	sbrs	r28, 0
     652:	06 c0       	rjmp	.+12     	; 0x660 <LCD_send_nibble+0x18>
		DIO_Write(LCD_D4_PORT, LCD_D4_PIN, HIGH);
     654:	4f ef       	ldi	r20, 0xFF	; 255
     656:	60 e1       	ldi	r22, 0x10	; 16
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
     65e:	05 c0       	rjmp	.+10     	; 0x66a <LCD_send_nibble+0x22>
	else
		DIO_Write(LCD_D4_PORT, LCD_D4_PIN, LOW);
     660:	40 e0       	ldi	r20, 0x00	; 0
     662:	60 e1       	ldi	r22, 0x10	; 16
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>

	mask *= 2;
	if(data&mask)
     66a:	c1 ff       	sbrs	r28, 1
     66c:	06 c0       	rjmp	.+12     	; 0x67a <LCD_send_nibble+0x32>
		DIO_Write(LCD_D5_PORT, LCD_D5_PIN, HIGH);
     66e:	4f ef       	ldi	r20, 0xFF	; 255
     670:	60 e2       	ldi	r22, 0x20	; 32
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
     678:	05 c0       	rjmp	.+10     	; 0x684 <LCD_send_nibble+0x3c>
	else
		DIO_Write(LCD_D5_PORT, LCD_D5_PIN, LOW);
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	60 e2       	ldi	r22, 0x20	; 32
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>

	mask *= 2;
	if(data&mask)
     684:	c2 ff       	sbrs	r28, 2
     686:	06 c0       	rjmp	.+12     	; 0x694 <LCD_send_nibble+0x4c>
		DIO_Write(LCD_D6_PORT, LCD_D6_PIN, HIGH);
     688:	4f ef       	ldi	r20, 0xFF	; 255
     68a:	60 e4       	ldi	r22, 0x40	; 64
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
     692:	05 c0       	rjmp	.+10     	; 0x69e <LCD_send_nibble+0x56>
	else
		DIO_Write(LCD_D6_PORT, LCD_D6_PIN, LOW);
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	60 e4       	ldi	r22, 0x40	; 64
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>

	mask *= 2;
	if(data&mask)
     69e:	c8 70       	andi	r28, 0x08	; 8
     6a0:	31 f0       	breq	.+12     	; 0x6ae <LCD_send_nibble+0x66>
		DIO_Write(LCD_D7_PORT, LCD_D7_PIN, HIGH);
     6a2:	4f ef       	ldi	r20, 0xFF	; 255
     6a4:	60 e8       	ldi	r22, 0x80	; 128
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <LCD_send_nibble+0x70>
	else
		DIO_Write(LCD_D7_PORT, LCD_D7_PIN, LOW);
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	60 e8       	ldi	r22, 0x80	; 128
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
}
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <LCD_send_char>:

void LCD_send_char(char data)		//Sends Char to LCD
{
     6bc:	cf 93       	push	r28
     6be:	c8 2f       	mov	r28, r24
	DIO_Write(LCD_RS_PORT, LCD_RS_PIN, HIGH);
     6c0:	4f ef       	ldi	r20, 0xFF	; 255
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>

	LCD_send_nibble(data); // Higher nibble first
     6ca:	8c 2f       	mov	r24, r28
     6cc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_send_nibble>
	LCD_EN_pulse();
     6d0:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_EN_pulse>

	LCD_send_nibble(data<<4);
     6d4:	8c 2f       	mov	r24, r28
     6d6:	82 95       	swap	r24
     6d8:	80 7f       	andi	r24, 0xF0	; 240
     6da:	0e 94 24 03 	call	0x648	; 0x648 <LCD_send_nibble>
	LCD_EN_pulse();
     6de:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_EN_pulse>
	SwDelay_ms(1);
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
}
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <LCD_send_command>:
void LCD_send_command(uint8 data)	//Sends Command to LCD
{
     6f2:	cf 93       	push	r28
     6f4:	c8 2f       	mov	r28, r24
	DIO_Write(LCD_RS_PORT, LCD_RS_PIN, LOW);
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	62 e0       	ldi	r22, 0x02	; 2
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>

	LCD_send_nibble(data); // Higher nibble first
     700:	8c 2f       	mov	r24, r28
     702:	0e 94 24 03 	call	0x648	; 0x648 <LCD_send_nibble>
	LCD_EN_pulse();
     706:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_EN_pulse>

	LCD_send_nibble(data<<4);
     70a:	8c 2f       	mov	r24, r28
     70c:	82 95       	swap	r24
     70e:	80 7f       	andi	r24, 0xF0	; 240
     710:	0e 94 24 03 	call	0x648	; 0x648 <LCD_send_nibble>
	LCD_EN_pulse();
     714:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_EN_pulse>
	SwDelay_ms(1);
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
}
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <LCD_init>:
void LCD_init(void)//Initializes LCD
{
	LCD_config_pins();
     728:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_config_pins>

	SwDelay_ms(20);
     72c:	64 e1       	ldi	r22, 0x14	; 20
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
//
//	gpioPinWrite(LCD_RS_PORT, LCD_RS_PIN, LOW);
//	gpioPinWrite(LCD_RW_PORT, LCD_RW_PIN, LOW);
//	gpioPinWrite(LCD_EN_PORT, LCD_EN_PIN, LOW);

	LCD_send_command(0x33);
     738:	83 e3       	ldi	r24, 0x33	; 51
     73a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
	LCD_send_command(0x32);
     73e:	82 e3       	ldi	r24, 0x32	; 50
     740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
	LCD_send_command(Four_bit); // 4-bit
     744:	88 e2       	ldi	r24, 0x28	; 40
     746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
	LCD_send_command(Cursor_on);
     74a:	8e e0       	ldi	r24, 0x0E	; 14
     74c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
	LCD_send_command(Lcd_clear);
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
	SwDelay_ms(10);
     756:	6a e0       	ldi	r22, 0x0A	; 10
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SwDelay_ms>
	LCD_send_command(Increment_cursor);
     762:	86 e0       	ldi	r24, 0x06	; 6
     764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
	LCD_send_command(Cursor_off); // Cursor off
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
     76e:	08 95       	ret

00000770 <LCD_clear>:
}
void LCD_clear(void)				//Clears LCD
{
	LCD_send_command(Lcd_clear);
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
     776:	08 95       	ret

00000778 <LCD_send_string>:
}

void LCD_send_string(char* data)	//Outputs string to LCD
{
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
	while(*data){
     77e:	88 81       	ld	r24, Y
     780:	88 23       	and	r24, r24
     782:	31 f0       	breq	.+12     	; 0x790 <LCD_send_string+0x18>
     784:	21 96       	adiw	r28, 0x01	; 1
		LCD_send_char(*data++);
     786:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_send_char>
	LCD_send_command(Lcd_clear);
}

void LCD_send_string(char* data)	//Outputs string to LCD
{
	while(*data){
     78a:	89 91       	ld	r24, Y+
     78c:	81 11       	cpse	r24, r1
     78e:	fb cf       	rjmp	.-10     	; 0x786 <LCD_send_string+0xe>
		LCD_send_char(*data++);
	}
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <LCD_goto_xy>:

void LCD_goto_xy(uint8 x, uint8 y)	//Cursor to X Y position
{
	uint8 DDRAMAddr;
	// remap lines into proper order
	switch(y)
     796:	62 30       	cpi	r22, 0x02	; 2
     798:	31 f0       	breq	.+12     	; 0x7a6 <LCD_goto_xy+0x10>
     79a:	63 30       	cpi	r22, 0x03	; 3
     79c:	31 f0       	breq	.+12     	; 0x7aa <LCD_goto_xy+0x14>
     79e:	61 30       	cpi	r22, 0x01	; 1
     7a0:	29 f4       	brne	.+10     	; 0x7ac <LCD_goto_xy+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     7a2:	80 5c       	subi	r24, 0xC0	; 192
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <LCD_goto_xy+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     7a6:	8c 5e       	subi	r24, 0xEC	; 236
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <LCD_goto_xy+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     7aa:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCD_send_command(1<<LCD_DDRAM | DDRAMAddr);
     7ac:	80 68       	ori	r24, 0x80	; 128
     7ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_send_command>
     7b2:	08 95       	ret

000007b4 <Motor_Init>:
 * Return		: ERROR_STATUS
 * Description	: Initialize (Enable, IN1, IN2) pins as digital outputs.
 */
 ERROR_STATUS 
 Motor_Init(uint8 Motor_Number)
 {
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <Motor_Init+0xa>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <Motor_Init+0xc>
     7c0:	1f 92       	push	r1
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s DIO_info;
	Pwm_Cfg_s PWM_info;
	switch(Motor_Number)
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <Motor_Init+0x1c>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	21 f1       	breq	.+72     	; 0x816 <Motor_Init+0x62>
     7ce:	46 c0       	rjmp	.+140    	; 0x85c <Motor_Init+0xa8>
	{
		case MOTOR_1:
		DIO_info.GPIO = MOTOR_EN_1_GPIO;
     7d0:	13 e0       	ldi	r17, 0x03	; 3
     7d2:	19 83       	std	Y+1, r17	; 0x01
		DIO_info.pins = MOTOR_EN_1_BIT;
     7d4:	80 e1       	ldi	r24, 0x10	; 16
     7d6:	8a 83       	std	Y+2, r24	; 0x02
		DIO_info.dir = OUTPUT;
     7d8:	0f ef       	ldi	r16, 0xFF	; 255
     7da:	0b 83       	std	Y+3, r16	; 0x03
		DIO_init(&DIO_info);
     7dc:	ce 01       	movw	r24, r28
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
		DIO_info.GPIO = MOTOR_OUT_1A_GPIO;
     7e4:	19 83       	std	Y+1, r17	; 0x01
		DIO_info.pins = MOTOR_OUT_1A_BIT;
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	8a 83       	std	Y+2, r24	; 0x02
		DIO_info.dir = OUTPUT;
     7ea:	0b 83       	std	Y+3, r16	; 0x03
		DIO_init(&DIO_info);
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
		DIO_info.GPIO = MOTOR_OUT_1B_GPIO;
     7f4:	19 83       	std	Y+1, r17	; 0x01
		DIO_info.pins = MOTOR_OUT_1B_BIT;
     7f6:	88 e0       	ldi	r24, 0x08	; 8
     7f8:	8a 83       	std	Y+2, r24	; 0x02
		DIO_info.dir = OUTPUT;
     7fa:	0b 83       	std	Y+3, r16	; 0x03
		DIO_init(&DIO_info);
     7fc:	ce 01       	movw	r24, r28
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
		PWM_info.Channel = PWM_CH1A;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	8c 83       	std	Y+4, r24	; 0x04
		PWM_info.Prescaler = PWM_PRESCALER_64;
     808:	1d 83       	std	Y+5, r17	; 0x05
		Pwm_Init(&PWM_info);
     80a:	ce 01       	movw	r24, r28
     80c:	04 96       	adiw	r24, 0x04	; 4
     80e:	0e 94 97 07 	call	0xf2e	; 0xf2e <Pwm_Init>
		Pwm_Init(&PWM_info);
		break;
		default:
		return E_NOK;
	}	
	return E_OK; 
     812:	80 e0       	ldi	r24, 0x00	; 0
		DIO_info.dir = OUTPUT;
		DIO_init(&DIO_info);
		PWM_info.Channel = PWM_CH1A;
		PWM_info.Prescaler = PWM_PRESCALER_64;
		Pwm_Init(&PWM_info);
		break;
     814:	24 c0       	rjmp	.+72     	; 0x85e <Motor_Init+0xaa>
		case MOTOR_2:
		DIO_info.GPIO = MOTOR_EN_2_GPIO;
     816:	13 e0       	ldi	r17, 0x03	; 3
     818:	19 83       	std	Y+1, r17	; 0x01
		DIO_info.pins = MOTOR_EN_2_BIT;
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	8a 83       	std	Y+2, r24	; 0x02
		DIO_info.dir = OUTPUT;
     81e:	0f ef       	ldi	r16, 0xFF	; 255
     820:	0b 83       	std	Y+3, r16	; 0x03
		DIO_init(&DIO_info);
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
		DIO_info.GPIO = MOTOR_OUT_2A_GPIO;
     82a:	19 83       	std	Y+1, r17	; 0x01
		DIO_info.pins = MOTOR_OUT_2A_BIT;
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	8a 83       	std	Y+2, r24	; 0x02
		DIO_info.dir = OUTPUT;
     830:	0b 83       	std	Y+3, r16	; 0x03
		DIO_init(&DIO_info);
     832:	ce 01       	movw	r24, r28
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
		DIO_info.GPIO = MOTOR_OUT_2B_GPIO;
     83a:	19 83       	std	Y+1, r17	; 0x01
		DIO_info.pins = MOTOR_OUT_2B_BIT;
     83c:	80 e8       	ldi	r24, 0x80	; 128
     83e:	8a 83       	std	Y+2, r24	; 0x02
		DIO_info.dir = OUTPUT;
     840:	0b 83       	std	Y+3, r16	; 0x03
		DIO_init(&DIO_info);
     842:	ce 01       	movw	r24, r28
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
		PWM_info.Channel = PWM_CH1B;
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	8c 83       	std	Y+4, r24	; 0x04
		PWM_info.Prescaler = PWM_PRESCALER_64;
     84e:	1d 83       	std	Y+5, r17	; 0x05
		Pwm_Init(&PWM_info);
     850:	ce 01       	movw	r24, r28
     852:	04 96       	adiw	r24, 0x04	; 4
     854:	0e 94 97 07 	call	0xf2e	; 0xf2e <Pwm_Init>
		break;
		default:
		return E_NOK;
	}	
	return E_OK; 
     858:	80 e0       	ldi	r24, 0x00	; 0
		DIO_info.dir = OUTPUT;
		DIO_init(&DIO_info);
		PWM_info.Channel = PWM_CH1B;
		PWM_info.Prescaler = PWM_PRESCALER_64;
		Pwm_Init(&PWM_info);
		break;
     85a:	01 c0       	rjmp	.+2      	; 0x85e <Motor_Init+0xaa>
		default:
		return E_NOK;
     85c:	81 e0       	ldi	r24, 0x01	; 1
	}	
	return E_OK; 
 }
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	08 95       	ret

00000872 <Motor_Direction>:
 * Descriptio: Controls the motor direction from getting the motor number and the direction.
*/
ERROR_STATUS 
Motor_Direction(uint8 Motor_Number, uint8 Motor_Direction)
{
	switch (Motor_Number)
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	19 f0       	breq	.+6      	; 0x87c <Motor_Direction+0xa>
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	81 f1       	breq	.+96     	; 0x8da <Motor_Direction+0x68>
     87a:	5d c0       	rjmp	.+186    	; 0x936 <Motor_Direction+0xc4>
	{
		case MOTOR_1:
		switch (Motor_Direction)
     87c:	61 30       	cpi	r22, 0x01	; 1
     87e:	89 f0       	breq	.+34     	; 0x8a2 <Motor_Direction+0x30>
     880:	18 f0       	brcs	.+6      	; 0x888 <Motor_Direction+0x16>
     882:	62 30       	cpi	r22, 0x02	; 2
     884:	e1 f0       	breq	.+56     	; 0x8be <Motor_Direction+0x4c>
     886:	57 c0       	rjmp	.+174    	; 0x936 <Motor_Direction+0xc4>
		{
			case MOTOR_STOP:
			DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	64 e0       	ldi	r22, 0x04	; 4
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	68 e0       	ldi	r22, 0x08	; 8
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			Mot_state[MOTOR_1 - 1] = MOTOR_STOP;
     89c:	10 92 e3 00 	sts	0x00E3, r1
			break;
     8a0:	4a c0       	rjmp	.+148    	; 0x936 <Motor_Direction+0xc4>
			case MOTOR_FORWARD:
			DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, HIGH);
     8a2:	4f ef       	ldi	r20, 0xFF	; 255
     8a4:	64 e0       	ldi	r22, 0x04	; 4
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	68 e0       	ldi	r22, 0x08	; 8
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			Mot_state[MOTOR_1 - 1] = MOTOR_FORWARD;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 e3 00 	sts	0x00E3, r24
			break;
     8bc:	3c c0       	rjmp	.+120    	; 0x936 <Motor_Direction+0xc4>
			case MOTOR_BACKWARD:
			DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	64 e0       	ldi	r22, 0x04	; 4
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, HIGH);
     8c8:	4f ef       	ldi	r20, 0xFF	; 255
     8ca:	68 e0       	ldi	r22, 0x08	; 8
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			Mot_state[MOTOR_1 - 1] = MOTOR_BACKWARD;
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	80 93 e3 00 	sts	0x00E3, r24
			break;
     8d8:	2e c0       	rjmp	.+92     	; 0x936 <Motor_Direction+0xc4>
			default:
			return E_NOK;
		}
		break;
		case MOTOR_2:
		switch (Motor_Direction)
     8da:	61 30       	cpi	r22, 0x01	; 1
     8dc:	89 f0       	breq	.+34     	; 0x900 <Motor_Direction+0x8e>
     8de:	18 f0       	brcs	.+6      	; 0x8e6 <Motor_Direction+0x74>
     8e0:	62 30       	cpi	r22, 0x02	; 2
     8e2:	e1 f0       	breq	.+56     	; 0x91c <Motor_Direction+0xaa>
     8e4:	28 c0       	rjmp	.+80     	; 0x936 <Motor_Direction+0xc4>
		{
			case MOTOR_STOP:
			DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	60 e4       	ldi	r22, 0x40	; 64
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	60 e8       	ldi	r22, 0x80	; 128
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			Mot_state[MOTOR_2 - 1] = MOTOR_STOP;
     8fa:	10 92 e4 00 	sts	0x00E4, r1
			break;
     8fe:	1b c0       	rjmp	.+54     	; 0x936 <Motor_Direction+0xc4>
			case MOTOR_FORWARD:
			DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, HIGH);
     900:	4f ef       	ldi	r20, 0xFF	; 255
     902:	60 e4       	ldi	r22, 0x40	; 64
     904:	83 e0       	ldi	r24, 0x03	; 3
     906:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	60 e8       	ldi	r22, 0x80	; 128
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			Mot_state[MOTOR_2 - 1] = MOTOR_FORWARD;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 e4 00 	sts	0x00E4, r24
			break;
     91a:	0d c0       	rjmp	.+26     	; 0x936 <Motor_Direction+0xc4>
			case MOTOR_BACKWARD:
			DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	60 e4       	ldi	r22, 0x40	; 64
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, HIGH);
     926:	4f ef       	ldi	r20, 0xFF	; 255
     928:	60 e8       	ldi	r22, 0x80	; 128
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
			Mot_state[MOTOR_2 - 1] = MOTOR_BACKWARD;
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	80 93 e4 00 	sts	0x00E4, r24
		break;
		default:
		return E_NOK;
	}	
	return E_NOK;
}
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	08 95       	ret

0000093a <Motor_Start>:
 * Descriptio: Start the motor.
*/
ERROR_STATUS 
Motor_Start(uint8 Motor_Number, uint8 Mot_Speed)
{
	if (Mot_Speed > MAX_SPEED || Mot_Speed < MIN_SPEED)
     93a:	65 36       	cpi	r22, 0x65	; 101
     93c:	b8 f4       	brcc	.+46     	; 0x96c <Motor_Start+0x32>
	{
		return E_NOK;
	}
	else
	{
		switch(Motor_Number)
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	19 f0       	breq	.+6      	; 0x948 <Motor_Start+0xe>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	51 f0       	breq	.+20     	; 0x95a <Motor_Start+0x20>
     946:	14 c0       	rjmp	.+40     	; 0x970 <Motor_Start+0x36>
		{
			case MOTOR_1:
			Pwm_Start(PWM_CH1A, Mot_Speed, MOTOR_FREQ);
     948:	28 ee       	ldi	r18, 0xE8	; 232
     94a:	33 e0       	ldi	r19, 0x03	; 3
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Pwm_Start>
			break;
			default:
			return E_NOK;			
		}
	}
	return E_OK;
     956:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Motor_Number)
		{
			case MOTOR_1:
			Pwm_Start(PWM_CH1A, Mot_Speed, MOTOR_FREQ);
			break;
     958:	08 95       	ret
			case MOTOR_2:
			Pwm_Start(PWM_CH1B, Mot_Speed, MOTOR_FREQ);
     95a:	28 ee       	ldi	r18, 0xE8	; 232
     95c:	33 e0       	ldi	r19, 0x03	; 3
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Pwm_Start>
			break;
			default:
			return E_NOK;			
		}
	}
	return E_OK;
     968:	80 e0       	ldi	r24, 0x00	; 0
			case MOTOR_1:
			Pwm_Start(PWM_CH1A, Mot_Speed, MOTOR_FREQ);
			break;
			case MOTOR_2:
			Pwm_Start(PWM_CH1B, Mot_Speed, MOTOR_FREQ);
			break;
     96a:	08 95       	ret
ERROR_STATUS 
Motor_Start(uint8 Motor_Number, uint8 Mot_Speed)
{
	if (Mot_Speed > MAX_SPEED || Mot_Speed < MIN_SPEED)
	{
		return E_NOK;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	08 95       	ret
			break;
			case MOTOR_2:
			Pwm_Start(PWM_CH1B, Mot_Speed, MOTOR_FREQ);
			break;
			default:
			return E_NOK;			
     970:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return E_OK;
}
     972:	08 95       	ret

00000974 <Motor_SpeedUpdate>:
 * Descriptio: Controls the motor speed from getting the motor number and the speed.
*/
ERROR_STATUS 
Motor_SpeedUpdate(uint8 Motor_Number, uint8 Speed)
{
	if (Speed > MAX_SPEED || Speed < MIN_SPEED)
     974:	65 36       	cpi	r22, 0x65	; 101
     976:	b8 f4       	brcc	.+46     	; 0x9a6 <Motor_SpeedUpdate+0x32>
	{
		return E_NOK;
	}
	else
	{
		switch(Motor_Number)
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	19 f0       	breq	.+6      	; 0x982 <Motor_SpeedUpdate+0xe>
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	51 f0       	breq	.+20     	; 0x994 <Motor_SpeedUpdate+0x20>
     980:	14 c0       	rjmp	.+40     	; 0x9aa <Motor_SpeedUpdate+0x36>
		{
			case MOTOR_1:
			Pwm_Update(PWM_CH1A, Speed, MOTOR_FREQ);
     982:	28 ee       	ldi	r18, 0xE8	; 232
     984:	33 e0       	ldi	r19, 0x03	; 3
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 17 09 	call	0x122e	; 0x122e <Pwm_Update>
			break;
			default:
			return E_NOK;
		}
	}
	return E_OK;	
     990:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Motor_Number)
		{
			case MOTOR_1:
			Pwm_Update(PWM_CH1A, Speed, MOTOR_FREQ);
			break;
     992:	08 95       	ret
			case MOTOR_2:
			Pwm_Update(PWM_CH1B, Speed, MOTOR_FREQ);
     994:	28 ee       	ldi	r18, 0xE8	; 232
     996:	33 e0       	ldi	r19, 0x03	; 3
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	0e 94 17 09 	call	0x122e	; 0x122e <Pwm_Update>
			break;
			default:
			return E_NOK;
		}
	}
	return E_OK;	
     9a2:	80 e0       	ldi	r24, 0x00	; 0
			case MOTOR_1:
			Pwm_Update(PWM_CH1A, Speed, MOTOR_FREQ);
			break;
			case MOTOR_2:
			Pwm_Update(PWM_CH1B, Speed, MOTOR_FREQ);
			break;
     9a4:	08 95       	ret
ERROR_STATUS 
Motor_SpeedUpdate(uint8 Motor_Number, uint8 Speed)
{
	if (Speed > MAX_SPEED || Speed < MIN_SPEED)
	{
		return E_NOK;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	08 95       	ret
			break;
			case MOTOR_2:
			Pwm_Update(PWM_CH1B, Speed, MOTOR_FREQ);
			break;
			default:
			return E_NOK;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return E_OK;	
}
     9ac:	08 95       	ret

000009ae <Motor_Stop>:
*/
ERROR_STATUS 
Motor_Stop(uint8 Motor_Number)
{

	switch(Motor_Number)
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <Motor_Stop+0xa>
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	61 f0       	breq	.+24     	; 0x9ce <Motor_Stop+0x20>
     9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <Motor_Stop+0x36>
	{
		case MOTOR_1:
		Pwm_Stop(PWM_CH1A);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 bc 09 	call	0x1378	; 0x1378 <Pwm_Stop>
		Motor_Direction(MOTOR_1, MOTOR_STOP);
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
		Mot_state[MOTOR_1 - 1] = MOTOR_STOP;
     9c6:	10 92 e3 00 	sts	0x00E3, r1
		Mot_state[MOTOR_2 - 1] = MOTOR_STOP;
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
     9ca:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR_1:
		Pwm_Stop(PWM_CH1A);
		Motor_Direction(MOTOR_1, MOTOR_STOP);
		Mot_state[MOTOR_1 - 1] = MOTOR_STOP;
		break;
     9cc:	08 95       	ret
		case MOTOR_2:
		Pwm_Stop(PWM_CH1B);
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	0e 94 bc 09 	call	0x1378	; 0x1378 <Pwm_Stop>
		Motor_Direction(MOTOR_2, MOTOR_STOP);
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 39 04 	call	0x872	; 0x872 <Motor_Direction>
		Mot_state[MOTOR_2 - 1] = MOTOR_STOP;
     9dc:	10 92 e4 00 	sts	0x00E4, r1
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
     9e0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case MOTOR_2:
		Pwm_Stop(PWM_CH1B);
		Motor_Direction(MOTOR_2, MOTOR_STOP);
		Mot_state[MOTOR_2 - 1] = MOTOR_STOP;
		break;
     9e2:	08 95       	ret
		default:
		return E_NOK;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;	
}
     9e6:	08 95       	ret

000009e8 <SwDelay_ms>:
#include "softwareDelay.h"


void
SwDelay_ms(uint32 n)
{
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	9b 01       	movw	r18, r22
     9ee:	ac 01       	movw	r20, r24
	uint32 i;
	for(i=0;i<810*n;i++);
     9f0:	aa e2       	ldi	r26, 0x2A	; 42
     9f2:	b3 e0       	ldi	r27, 0x03	; 3
     9f4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__muluhisi3>
     9f8:	61 15       	cp	r22, r1
     9fa:	71 05       	cpc	r23, r1
     9fc:	81 05       	cpc	r24, r1
     9fe:	91 05       	cpc	r25, r1
     a00:	61 f0       	breq	.+24     	; 0xa1a <SwDelay_ms+0x32>
     a02:	00 e0       	ldi	r16, 0x00	; 0
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	98 01       	movw	r18, r16
     a08:	0f 5f       	subi	r16, 0xFF	; 255
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	2f 4f       	sbci	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	06 17       	cp	r16, r22
     a12:	17 07       	cpc	r17, r23
     a14:	28 07       	cpc	r18, r24
     a16:	39 07       	cpc	r19, r25
     a18:	b9 f7       	brne	.-18     	; 0xa08 <SwDelay_ms+0x20>
	return;
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/
ERROR_STATUS 
Us_Init(void)
{
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	28 97       	sbiw	r28, 0x08	; 8
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
	DIO_Cfg_s trigger_info = {TRIGGER_GPIO,TRIGGER_BIT,OUTPUT};
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	8a 83       	std	Y+2, r24	; 0x02
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	8b 83       	std	Y+3, r24	; 0x03
	if(DIO_init(&trigger_info) == E_NOK)
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	89 f0       	breq	.+34     	; 0xa6e <Us_Init+0x4e>
	{
		return E_NOK;
	}
	else
	{
		DIO_Cfg_s echo_info = {ECHO_GPIO,ECHO_BIT,INPUT};
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 83       	std	Y+4, r24	; 0x04
     a50:	12 e0       	ldi	r17, 0x02	; 2
     a52:	1d 83       	std	Y+5, r17	; 0x05
     a54:	1e 82       	std	Y+6, r1	; 0x06
		DIO_init(&echo_info);
     a56:	ce 01       	movw	r24, r28
     a58:	04 96       	adiw	r24, 0x04	; 4
     a5a:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
		Icu_cfg_s ICU_info = {ICU_CH2, ICU_TIMER_CH2};
     a5e:	1f 83       	std	Y+7, r17	; 0x07
     a60:	18 87       	std	Y+8, r17	; 0x08
		Icu_Init(&ICU_info);
     a62:	ce 01       	movw	r24, r28
     a64:	07 96       	adiw	r24, 0x07	; 7
     a66:	0e 94 10 02 	call	0x420	; 0x420 <Icu_Init>
	}
	return E_OK;
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <Us_Init+0x50>
Us_Init(void)
{
	DIO_Cfg_s trigger_info = {TRIGGER_GPIO,TRIGGER_BIT,OUTPUT};
	if(DIO_init(&trigger_info) == E_NOK)
	{
		return E_NOK;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
		DIO_init(&echo_info);
		Icu_cfg_s ICU_info = {ICU_CH2, ICU_TIMER_CH2};
		Icu_Init(&ICU_info);
	}
	return E_OK;
}
     a70:	28 96       	adiw	r28, 0x08	; 8
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	08 95       	ret

00000a84 <Us_Trigger>:
 * Description      : This function send the  pulse, to trigger pin of the UltraSonic to enhance  *
 *                    the  ECUO signal                                                            *
 *************************************************************************************************/
ERROR_STATUS 
Us_Trigger(void)
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <Us_Trigger+0x6>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
	volatile int x;
	DIO_Write(TRIGGER_GPIO, TRIGGER_BIT, HIGH);
     a8e:	4f ef       	ldi	r20, 0xFF	; 255
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
	for (x=0;x<10;x++);
     a98:	1a 82       	std	Y+2, r1	; 0x02
     a9a:	19 82       	std	Y+1, r1	; 0x01
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	0a 97       	sbiw	r24, 0x0a	; 10
     aa2:	4c f4       	brge	.+18     	; 0xab6 <Us_Trigger+0x32>
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	9a 83       	std	Y+2, r25	; 0x02
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	9a 81       	ldd	r25, Y+2	; 0x02
     ab2:	0a 97       	sbiw	r24, 0x0a	; 10
     ab4:	bc f3       	brlt	.-18     	; 0xaa4 <Us_Trigger+0x20>
	DIO_Write(TRIGGER_GPIO, TRIGGER_BIT, LOW);
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 ed 05 	call	0xbda	; 0xbda <DIO_Write>
	return E_OK;
}
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <Us_GetDistance>:
 *                    use it to calculate the distance, then return the value in the              *
 *                    Distance parameter.                                                         *
 *************************************************************************************************/
ERROR_STATUS 
Us_GetDistance(uint16 *Distance)
{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
	if (NULL == Distance)
     ad2:	00 97       	sbiw	r24, 0x00	; 0
     ad4:	e1 f0       	breq	.+56     	; 0xb0e <Us_GetDistance+0x42>
		return E_NOK;
	}
	else
	{
		static uint32 u32_signlwidth;
		Icu_ReadTime(ICU_CH2, ICU_RISE_TO_FALL, &u32_signlwidth);
     ad6:	45 ee       	ldi	r20, 0xE5	; 229
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	0e 94 a5 02 	call	0x54a	; 0x54a <Icu_ReadTime>
		(*(Distance)) = u32_signlwidth / CONVERSION_CONSTANT_FROM_MICROSECOND_TO_CM;
     ae2:	60 91 e5 00 	lds	r22, 0x00E5
     ae6:	70 91 e6 00 	lds	r23, 0x00E6
     aea:	80 91 e7 00 	lds	r24, 0x00E7
     aee:	90 91 e8 00 	lds	r25, 0x00E8
     af2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__floatunsisf>
     af6:	2d ec       	ldi	r18, 0xCD	; 205
     af8:	3c ec       	ldi	r19, 0xCC	; 204
     afa:	48 e6       	ldi	r20, 0x68	; 104
     afc:	52 e4       	ldi	r21, 0x42	; 66
     afe:	0e 94 35 0c 	call	0x186a	; 0x186a <__divsf3>
     b02:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
     b06:	79 83       	std	Y+1, r23	; 0x01
     b08:	68 83       	st	Y, r22
	}
	return E_OK;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <Us_GetDistance+0x44>
ERROR_STATUS 
Us_GetDistance(uint16 *Distance)
{
	if (NULL == Distance)
	{
		return E_NOK;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
		static uint32 u32_signlwidth;
		Icu_ReadTime(ICU_CH2, ICU_RISE_TO_FALL, &u32_signlwidth);
		(*(Distance)) = u32_signlwidth / CONVERSION_CONSTANT_FROM_MICROSECOND_TO_CM;
	}
	return E_OK;
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <DIO_init>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_init (DIO_Cfg_s *DIO_info)
{
	if (!(DIO_info == NULL))
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	09 f4       	brne	.+2      	; 0xb1c <DIO_init+0x6>
     b1a:	57 c0       	rjmp	.+174    	; 0xbca <DIO_init+0xb4>
	{
		switch(DIO_info->dir)
     b1c:	fc 01       	movw	r30, r24
     b1e:	22 81       	ldd	r18, Z+2	; 0x02
     b20:	22 23       	and	r18, r18
     b22:	19 f0       	breq	.+6      	; 0xb2a <DIO_init+0x14>
     b24:	2f 3f       	cpi	r18, 0xFF	; 255
     b26:	59 f1       	breq	.+86     	; 0xb7e <DIO_init+0x68>
     b28:	52 c0       	rjmp	.+164    	; 0xbce <DIO_init+0xb8>
		{
			case INPUT:
			switch (DIO_info->GPIO)
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 81       	ld	r18, Z
     b2e:	21 30       	cpi	r18, 0x01	; 1
     b30:	71 f0       	breq	.+28     	; 0xb4e <DIO_init+0x38>
     b32:	28 f0       	brcs	.+10     	; 0xb3e <DIO_init+0x28>
     b34:	22 30       	cpi	r18, 0x02	; 2
     b36:	99 f0       	breq	.+38     	; 0xb5e <DIO_init+0x48>
     b38:	23 30       	cpi	r18, 0x03	; 3
     b3a:	c9 f0       	breq	.+50     	; 0xb6e <DIO_init+0x58>
     b3c:	4a c0       	rjmp	.+148    	; 0xbd2 <DIO_init+0xbc>
			{
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
     b3e:	2a b3       	in	r18, 0x1a	; 26
     b40:	fc 01       	movw	r30, r24
     b42:	81 81       	ldd	r24, Z+1	; 0x01
     b44:	80 95       	com	r24
     b46:	82 23       	and	r24, r18
     b48:	8a bb       	out	0x1a, r24	; 26
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch (DIO_info->GPIO)
			{
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
				break;
     b4c:	08 95       	ret
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
     b4e:	27 b3       	in	r18, 0x17	; 23
     b50:	fc 01       	movw	r30, r24
     b52:	81 81       	ldd	r24, Z+1	; 0x01
     b54:	80 95       	com	r24
     b56:	82 23       	and	r24, r18
     b58:	87 bb       	out	0x17, r24	; 23
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
				break;
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
				break;
     b5c:	08 95       	ret
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
     b5e:	24 b3       	in	r18, 0x14	; 20
     b60:	fc 01       	movw	r30, r24
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	80 95       	com	r24
     b66:	82 23       	and	r24, r18
     b68:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
				break;
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
				break;
     b6c:	08 95       	ret
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
     b6e:	21 b3       	in	r18, 0x11	; 17
     b70:	fc 01       	movw	r30, r24
     b72:	81 81       	ldd	r24, Z+1	; 0x01
     b74:	80 95       	com	r24
     b76:	82 23       	and	r24, r18
     b78:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
				break;
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
				break;
     b7c:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
			case OUTPUT:
			switch (DIO_info->GPIO)
     b7e:	fc 01       	movw	r30, r24
     b80:	20 81       	ld	r18, Z
     b82:	21 30       	cpi	r18, 0x01	; 1
     b84:	69 f0       	breq	.+26     	; 0xba0 <DIO_init+0x8a>
     b86:	28 f0       	brcs	.+10     	; 0xb92 <DIO_init+0x7c>
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	89 f0       	breq	.+34     	; 0xbae <DIO_init+0x98>
     b8c:	23 30       	cpi	r18, 0x03	; 3
     b8e:	b1 f0       	breq	.+44     	; 0xbbc <DIO_init+0xa6>
     b90:	22 c0       	rjmp	.+68     	; 0xbd6 <DIO_init+0xc0>
			{
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
     b92:	2a b3       	in	r18, 0x1a	; 26
     b94:	fc 01       	movw	r30, r24
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	82 2b       	or	r24, r18
     b9a:	8a bb       	out	0x1a, r24	; 26
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     b9c:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch (DIO_info->GPIO)
			{
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
				break;
     b9e:	08 95       	ret
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
     ba0:	27 b3       	in	r18, 0x17	; 23
     ba2:	fc 01       	movw	r30, r24
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	82 2b       	or	r24, r18
     ba8:	87 bb       	out	0x17, r24	; 23
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     baa:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
				break;
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
				break;
     bac:	08 95       	ret
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
     bae:	24 b3       	in	r18, 0x14	; 20
     bb0:	fc 01       	movw	r30, r24
     bb2:	81 81       	ldd	r24, Z+1	; 0x01
     bb4:	82 2b       	or	r24, r18
     bb6:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     bb8:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
				break;
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
				break;
     bba:	08 95       	ret
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
     bbc:	21 b3       	in	r18, 0x11	; 17
     bbe:	fc 01       	movw	r30, r24
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	82 2b       	or	r24, r18
     bc4:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
				break;
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
				break;
     bc8:	08 95       	ret
			return E_NOK;
		}
	}
	else
	{
		return E_NOK;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
			default:
			return E_NOK;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret
				break;
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
				break;
				default:
				return E_NOK;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	08 95       	ret
				break;
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
				break;
				default:
				return E_NOK;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		return E_NOK;
	}
	return E_OK;
}
     bd8:	08 95       	ret

00000bda <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_Write (uint8 GPIO, uint8 pins, uint8 value)
{
	switch(value)
     bda:	44 23       	and	r20, r20
     bdc:	19 f0       	breq	.+6      	; 0xbe4 <DIO_Write+0xa>
     bde:	4f 3f       	cpi	r20, 0xFF	; 255
     be0:	09 f1       	breq	.+66     	; 0xc24 <DIO_Write+0x4a>
     be2:	3c c0       	rjmp	.+120    	; 0xc5c <DIO_Write+0x82>
	{
		case LOW:
		switch (GPIO)
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	61 f0       	breq	.+24     	; 0xc00 <DIO_Write+0x26>
     be8:	28 f0       	brcs	.+10     	; 0xbf4 <DIO_Write+0x1a>
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	79 f0       	breq	.+30     	; 0xc0c <DIO_Write+0x32>
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	99 f0       	breq	.+38     	; 0xc18 <DIO_Write+0x3e>
     bf2:	36 c0       	rjmp	.+108    	; 0xc60 <DIO_Write+0x86>
		{
			case GPIOA:
			PORTA_DATA &= ~pins;
     bf4:	8b b3       	in	r24, 0x1b	; 27
     bf6:	60 95       	com	r22
     bf8:	68 23       	and	r22, r24
     bfa:	6b bb       	out	0x1b, r22	; 27
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
		case LOW:
		switch (GPIO)
		{
			case GPIOA:
			PORTA_DATA &= ~pins;
			break;
     bfe:	08 95       	ret
			case GPIOB:
			PORTB_DATA &= ~pins;
     c00:	88 b3       	in	r24, 0x18	; 24
     c02:	60 95       	com	r22
     c04:	68 23       	and	r22, r24
     c06:	68 bb       	out	0x18, r22	; 24
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     c08:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOA:
			PORTA_DATA &= ~pins;
			break;
			case GPIOB:
			PORTB_DATA &= ~pins;
			break;
     c0a:	08 95       	ret
			case GPIOC:
			PORTC_DATA &= ~pins;
     c0c:	85 b3       	in	r24, 0x15	; 21
     c0e:	60 95       	com	r22
     c10:	68 23       	and	r22, r24
     c12:	65 bb       	out	0x15, r22	; 21
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     c14:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOB:
			PORTB_DATA &= ~pins;
			break;
			case GPIOC:
			PORTC_DATA &= ~pins;
			break;
     c16:	08 95       	ret
			case GPIOD:
			PORTD_DATA &= ~pins;
     c18:	82 b3       	in	r24, 0x12	; 18
     c1a:	60 95       	com	r22
     c1c:	68 23       	and	r22, r24
     c1e:	62 bb       	out	0x12, r22	; 18
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     c20:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOC:
			PORTC_DATA &= ~pins;
			break;
			case GPIOD:
			PORTD_DATA &= ~pins;
			break;
     c22:	08 95       	ret
			default:
			return E_NOK;
		}
		break;
		case HIGH:
		switch (GPIO)
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	59 f0       	breq	.+22     	; 0xc3e <DIO_Write+0x64>
     c28:	28 f0       	brcs	.+10     	; 0xc34 <DIO_Write+0x5a>
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	69 f0       	breq	.+26     	; 0xc48 <DIO_Write+0x6e>
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	81 f0       	breq	.+32     	; 0xc52 <DIO_Write+0x78>
     c32:	18 c0       	rjmp	.+48     	; 0xc64 <DIO_Write+0x8a>
		{
			case GPIOA:
			PORTA_DATA |= pins;
     c34:	8b b3       	in	r24, 0x1b	; 27
     c36:	68 2b       	or	r22, r24
     c38:	6b bb       	out	0x1b, r22	; 27
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
		case HIGH:
		switch (GPIO)
		{
			case GPIOA:
			PORTA_DATA |= pins;
			break;
     c3c:	08 95       	ret
			case GPIOB:
			PORTB_DATA |= pins;
     c3e:	88 b3       	in	r24, 0x18	; 24
     c40:	68 2b       	or	r22, r24
     c42:	68 bb       	out	0x18, r22	; 24
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     c44:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOA:
			PORTA_DATA |= pins;
			break;
			case GPIOB:
			PORTB_DATA |= pins;
			break;
     c46:	08 95       	ret
			case GPIOC:
			PORTC_DATA |= pins;
     c48:	85 b3       	in	r24, 0x15	; 21
     c4a:	68 2b       	or	r22, r24
     c4c:	65 bb       	out	0x15, r22	; 21
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOB:
			PORTB_DATA |= pins;
			break;
			case GPIOC:
			PORTC_DATA |= pins;
			break;
     c50:	08 95       	ret
			case GPIOD:
			PORTD_DATA |= pins;
     c52:	82 b3       	in	r24, 0x12	; 18
     c54:	68 2b       	or	r22, r24
     c56:	62 bb       	out	0x12, r22	; 18
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
     c58:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOC:
			PORTC_DATA |= pins;
			break;
			case GPIOD:
			PORTD_DATA |= pins;
			break;
     c5a:	08 95       	ret
			default:
			return E_NOK;
		}
		break;
		default:
		return E_NOK;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	08 95       	ret
			break;
			case GPIOD:
			PORTD_DATA &= ~pins;
			break;
			default:
			return E_NOK;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	08 95       	ret
			break;
			case GPIOD:
			PORTD_DATA |= pins;
			break;
			default:
			return E_NOK;
     c64:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return E_NOK;
	}
	return E_OK;
}
     c66:	08 95       	ret

00000c68 <ExternInt_Init>:
 *	event of interrupt.
 *	Enable the required external interrupt from GICR but to allow the interrupt global interrupt must be set
 */
ERROR_STATUS 
ExternInt_Init(ExternInt_Cfg_s *ExternIntCfg)
{
     c68:	fc 01       	movw	r30, r24
	if (NULL == ExternIntCfg)
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	09 f4       	brne	.+2      	; 0xc70 <ExternInt_Init+0x8>
     c6e:	67 c0       	rjmp	.+206    	; 0xd3e <ExternInt_Init+0xd6>
	{
		return E_NOK;
	} 
	else
	{
		switch (ExternIntCfg->ExternInt_No)
     c70:	80 81       	ld	r24, Z
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	49 f1       	breq	.+82     	; 0xcc8 <ExternInt_Init+0x60>
     c76:	20 f0       	brcs	.+8      	; 0xc80 <ExternInt_Init+0x18>
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	09 f4       	brne	.+2      	; 0xc7e <ExternInt_Init+0x16>
     c7c:	49 c0       	rjmp	.+146    	; 0xd10 <ExternInt_Init+0xa8>
     c7e:	61 c0       	rjmp	.+194    	; 0xd42 <ExternInt_Init+0xda>
		{
			case EXTRN_INT_0:
				if (NULL != ExternIntCfg->ExternInt_CBF_Ptr)
     c80:	82 81       	ldd	r24, Z+2	; 0x02
     c82:	93 81       	ldd	r25, Z+3	; 0x03
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	21 f0       	breq	.+8      	; 0xc90 <ExternInt_Init+0x28>
				{
					EXT_INT_CBK_PTR[EXTRN_INT_0] = ExternIntCfg->ExternInt_CBF_Ptr;
     c88:	90 93 ea 00 	sts	0x00EA, r25
     c8c:	80 93 e9 00 	sts	0x00E9, r24
				} 
				else
				{
					
				}
				switch (ExternIntCfg->ExternInt_Event)
     c90:	81 81       	ldd	r24, Z+1	; 0x01
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	51 f0       	breq	.+20     	; 0xcaa <ExternInt_Init+0x42>
     c96:	28 f0       	brcs	.+10     	; 0xca2 <ExternInt_Init+0x3a>
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	61 f0       	breq	.+24     	; 0xcb4 <ExternInt_Init+0x4c>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	79 f0       	breq	.+30     	; 0xcbe <ExternInt_Init+0x56>
     ca0:	52 c0       	rjmp	.+164    	; 0xd46 <ExternInt_Init+0xde>
				{
					case LOW_LEVEL:
					MCUCR |= INT0_EDGE_LOW_LEVEL;
     ca2:	85 b7       	in	r24, 0x35	; 53
     ca4:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     ca6:	80 e0       	ldi	r24, 0x00	; 0
				}
				switch (ExternIntCfg->ExternInt_Event)
				{
					case LOW_LEVEL:
					MCUCR |= INT0_EDGE_LOW_LEVEL;
					break;
     ca8:	08 95       	ret
					case LOGICAL_CHANGE:
					MCUCR |= INT0_EDGE_CHANGE;
     caa:	85 b7       	in	r24, 0x35	; 53
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
					case LOW_LEVEL:
					MCUCR |= INT0_EDGE_LOW_LEVEL;
					break;
					case LOGICAL_CHANGE:
					MCUCR |= INT0_EDGE_CHANGE;
					break;
     cb2:	08 95       	ret
					case FALLING_EDGE:
					MCUCR |= INT0_EDGE_FALLING;
     cb4:	85 b7       	in	r24, 0x35	; 53
     cb6:	82 60       	ori	r24, 0x02	; 2
     cb8:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     cba:	80 e0       	ldi	r24, 0x00	; 0
					case LOGICAL_CHANGE:
					MCUCR |= INT0_EDGE_CHANGE;
					break;
					case FALLING_EDGE:
					MCUCR |= INT0_EDGE_FALLING;
					break;
     cbc:	08 95       	ret
					case RISING_EDGE:
					MCUCR |= INT0_EDGE_RISING;
     cbe:	85 b7       	in	r24, 0x35	; 53
     cc0:	83 60       	ori	r24, 0x03	; 3
     cc2:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
					case FALLING_EDGE:
					MCUCR |= INT0_EDGE_FALLING;
					break;
					case RISING_EDGE:
					MCUCR |= INT0_EDGE_RISING;
					break;
     cc6:	08 95       	ret
					default:
					return E_NOK;
				}
				break;
			case EXTRN_INT_1:
				if (NULL != ExternIntCfg->ExternInt_CBF_Ptr)
     cc8:	82 81       	ldd	r24, Z+2	; 0x02
     cca:	93 81       	ldd	r25, Z+3	; 0x03
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	21 f0       	breq	.+8      	; 0xcd8 <ExternInt_Init+0x70>
				{
					EXT_INT_CBK_PTR[EXTRN_INT_1] = ExternIntCfg->ExternInt_CBF_Ptr;
     cd0:	90 93 ec 00 	sts	0x00EC, r25
     cd4:	80 93 eb 00 	sts	0x00EB, r24
				}
				else
				{
					
				}
				switch (ExternIntCfg->ExternInt_Event)
     cd8:	81 81       	ldd	r24, Z+1	; 0x01
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	51 f0       	breq	.+20     	; 0xcf2 <ExternInt_Init+0x8a>
     cde:	28 f0       	brcs	.+10     	; 0xcea <ExternInt_Init+0x82>
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	61 f0       	breq	.+24     	; 0xcfc <ExternInt_Init+0x94>
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	79 f0       	breq	.+30     	; 0xd06 <ExternInt_Init+0x9e>
     ce8:	30 c0       	rjmp	.+96     	; 0xd4a <ExternInt_Init+0xe2>
				{
					case LOW_LEVEL:
					MCUCR |= INT1_EDGE_LOW_LEVEL;
     cea:	85 b7       	in	r24, 0x35	; 53
     cec:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     cee:	80 e0       	ldi	r24, 0x00	; 0
				}
				switch (ExternIntCfg->ExternInt_Event)
				{
					case LOW_LEVEL:
					MCUCR |= INT1_EDGE_LOW_LEVEL;
					break;
     cf0:	08 95       	ret
					case LOGICAL_CHANGE:
					MCUCR |= INT1_EDGE_CHANGE;
     cf2:	85 b7       	in	r24, 0x35	; 53
     cf4:	84 60       	ori	r24, 0x04	; 4
     cf6:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
					case LOW_LEVEL:
					MCUCR |= INT1_EDGE_LOW_LEVEL;
					break;
					case LOGICAL_CHANGE:
					MCUCR |= INT1_EDGE_CHANGE;
					break;
     cfa:	08 95       	ret
					case FALLING_EDGE:
					MCUCR |= INT1_EDGE_FALLING;
     cfc:	85 b7       	in	r24, 0x35	; 53
     cfe:	88 60       	ori	r24, 0x08	; 8
     d00:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     d02:	80 e0       	ldi	r24, 0x00	; 0
					case LOGICAL_CHANGE:
					MCUCR |= INT1_EDGE_CHANGE;
					break;
					case FALLING_EDGE:
					MCUCR |= INT1_EDGE_FALLING;
					break;
     d04:	08 95       	ret
					case RISING_EDGE:
					MCUCR |= INT1_EDGE_RISING;
     d06:	85 b7       	in	r24, 0x35	; 53
     d08:	8c 60       	ori	r24, 0x0C	; 12
     d0a:	85 bf       	out	0x35, r24	; 53
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     d0c:	80 e0       	ldi	r24, 0x00	; 0
					case FALLING_EDGE:
					MCUCR |= INT1_EDGE_FALLING;
					break;
					case RISING_EDGE:
					MCUCR |= INT1_EDGE_RISING;
					break;
     d0e:	08 95       	ret
					default:
					return E_NOK;
				}
				break;
			case EXTRN_INT_2:
				if (NULL != ExternIntCfg->ExternInt_CBF_Ptr)
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	21 f0       	breq	.+8      	; 0xd20 <ExternInt_Init+0xb8>
				{
					EXT_INT_CBK_PTR[EXTRN_INT_2] = ExternIntCfg->ExternInt_CBF_Ptr;
     d18:	90 93 ee 00 	sts	0x00EE, r25
     d1c:	80 93 ed 00 	sts	0x00ED, r24
				}
				else
				{
					
				}
				switch (ExternIntCfg->ExternInt_Event)
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	19 f0       	breq	.+6      	; 0xd2c <ExternInt_Init+0xc4>
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	29 f0       	breq	.+10     	; 0xd34 <ExternInt_Init+0xcc>
     d2a:	11 c0       	rjmp	.+34     	; 0xd4e <ExternInt_Init+0xe6>
				{
					case FALLING_EDGE:
						MCUCSR |= INT2_EDGE_FALLING;
     d2c:	84 b7       	in	r24, 0x34	; 52
     d2e:	84 bf       	out	0x34, r24	; 52
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     d30:	80 e0       	ldi	r24, 0x00	; 0
				}
				switch (ExternIntCfg->ExternInt_Event)
				{
					case FALLING_EDGE:
						MCUCSR |= INT2_EDGE_FALLING;
						break;
     d32:	08 95       	ret
					case RISING_EDGE:
						MCUCSR |= INT2_EDGE_RISING;
     d34:	84 b7       	in	r24, 0x34	; 52
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	84 bf       	out	0x34, r24	; 52
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
     d3a:	80 e0       	ldi	r24, 0x00	; 0
					case FALLING_EDGE:
						MCUCSR |= INT2_EDGE_FALLING;
						break;
					case RISING_EDGE:
						MCUCSR |= INT2_EDGE_RISING;
						break;
     d3c:	08 95       	ret
ERROR_STATUS 
ExternInt_Init(ExternInt_Cfg_s *ExternIntCfg)
{
	if (NULL == ExternIntCfg)
	{
		return E_NOK;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	08 95       	ret
					default:
						return E_NOK;
				}
				break;
			default:
				return E_NOK;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	08 95       	ret
					break;
					case RISING_EDGE:
					MCUCR |= INT0_EDGE_RISING;
					break;
					default:
					return E_NOK;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	08 95       	ret
					break;
					case RISING_EDGE:
					MCUCR |= INT1_EDGE_RISING;
					break;
					default:
					return E_NOK;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	08 95       	ret
						break;
					case RISING_EDGE:
						MCUCSR |= INT2_EDGE_RISING;
						break;
					default:
						return E_NOK;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
			default:
				return E_NOK;
		}
	}
	return E_OK;
}
     d50:	08 95       	ret

00000d52 <ExternInt_SetEvent>:
 * 				note: usually used to poll on the flag.
 */
ERROR_STATUS 
ExternInt_SetEvent(uint8 ExternInt_No,uint8 InterruptEvent)
{
	switch (ExternInt_No)
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	11 f1       	breq	.+68     	; 0xd9a <ExternInt_SetEvent+0x48>
     d56:	18 f0       	brcs	.+6      	; 0xd5e <ExternInt_SetEvent+0xc>
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	e9 f1       	breq	.+122    	; 0xdd6 <ExternInt_SetEvent+0x84>
     d5c:	4d c0       	rjmp	.+154    	; 0xdf8 <ExternInt_SetEvent+0xa6>
	{
		case EXTRN_INT_0:
			MCUCR &= ~INT0_EDGE_BITS;
     d5e:	85 b7       	in	r24, 0x35	; 53
     d60:	8c 7f       	andi	r24, 0xFC	; 252
     d62:	85 bf       	out	0x35, r24	; 53
			switch (InterruptEvent)
     d64:	61 30       	cpi	r22, 0x01	; 1
     d66:	51 f0       	breq	.+20     	; 0xd7c <ExternInt_SetEvent+0x2a>
     d68:	28 f0       	brcs	.+10     	; 0xd74 <ExternInt_SetEvent+0x22>
     d6a:	62 30       	cpi	r22, 0x02	; 2
     d6c:	61 f0       	breq	.+24     	; 0xd86 <ExternInt_SetEvent+0x34>
     d6e:	63 30       	cpi	r22, 0x03	; 3
     d70:	79 f0       	breq	.+30     	; 0xd90 <ExternInt_SetEvent+0x3e>
     d72:	44 c0       	rjmp	.+136    	; 0xdfc <ExternInt_SetEvent+0xaa>
			{
				case LOW_LEVEL:
				MCUCR |= INT0_EDGE_LOW_LEVEL;
     d74:	85 b7       	in	r24, 0x35	; 53
     d76:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     d78:	80 e0       	ldi	r24, 0x00	; 0
			MCUCR &= ~INT0_EDGE_BITS;
			switch (InterruptEvent)
			{
				case LOW_LEVEL:
				MCUCR |= INT0_EDGE_LOW_LEVEL;
				break;
     d7a:	08 95       	ret
				case LOGICAL_CHANGE:
				MCUCR |= INT0_EDGE_CHANGE;
     d7c:	85 b7       	in	r24, 0x35	; 53
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     d82:	80 e0       	ldi	r24, 0x00	; 0
				case LOW_LEVEL:
				MCUCR |= INT0_EDGE_LOW_LEVEL;
				break;
				case LOGICAL_CHANGE:
				MCUCR |= INT0_EDGE_CHANGE;
				break;
     d84:	08 95       	ret
				case FALLING_EDGE:
				MCUCR |= INT0_EDGE_FALLING;
     d86:	85 b7       	in	r24, 0x35	; 53
     d88:	82 60       	ori	r24, 0x02	; 2
     d8a:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     d8c:	80 e0       	ldi	r24, 0x00	; 0
				case LOGICAL_CHANGE:
				MCUCR |= INT0_EDGE_CHANGE;
				break;
				case FALLING_EDGE:
				MCUCR |= INT0_EDGE_FALLING;
				break;
     d8e:	08 95       	ret
				case RISING_EDGE:
				MCUCR |= INT0_EDGE_RISING;
     d90:	85 b7       	in	r24, 0x35	; 53
     d92:	83 60       	ori	r24, 0x03	; 3
     d94:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     d96:	80 e0       	ldi	r24, 0x00	; 0
				case FALLING_EDGE:
				MCUCR |= INT0_EDGE_FALLING;
				break;
				case RISING_EDGE:
				MCUCR |= INT0_EDGE_RISING;
				break;
     d98:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
		case EXTRN_INT_1:
			MCUCR &= ~INT1_EDGE_BITS;
     d9a:	85 b7       	in	r24, 0x35	; 53
     d9c:	83 7f       	andi	r24, 0xF3	; 243
     d9e:	85 bf       	out	0x35, r24	; 53
			switch (InterruptEvent)
     da0:	61 30       	cpi	r22, 0x01	; 1
     da2:	51 f0       	breq	.+20     	; 0xdb8 <ExternInt_SetEvent+0x66>
     da4:	28 f0       	brcs	.+10     	; 0xdb0 <ExternInt_SetEvent+0x5e>
     da6:	62 30       	cpi	r22, 0x02	; 2
     da8:	61 f0       	breq	.+24     	; 0xdc2 <ExternInt_SetEvent+0x70>
     daa:	63 30       	cpi	r22, 0x03	; 3
     dac:	79 f0       	breq	.+30     	; 0xdcc <ExternInt_SetEvent+0x7a>
     dae:	28 c0       	rjmp	.+80     	; 0xe00 <ExternInt_SetEvent+0xae>
			{
				case LOW_LEVEL:
				MCUCR |= INT1_EDGE_LOW_LEVEL;
     db0:	85 b7       	in	r24, 0x35	; 53
     db2:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     db4:	80 e0       	ldi	r24, 0x00	; 0
			MCUCR &= ~INT1_EDGE_BITS;
			switch (InterruptEvent)
			{
				case LOW_LEVEL:
				MCUCR |= INT1_EDGE_LOW_LEVEL;
				break;
     db6:	08 95       	ret
				case LOGICAL_CHANGE:
				MCUCR |= INT1_EDGE_CHANGE;
     db8:	85 b7       	in	r24, 0x35	; 53
     dba:	84 60       	ori	r24, 0x04	; 4
     dbc:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     dbe:	80 e0       	ldi	r24, 0x00	; 0
				case LOW_LEVEL:
				MCUCR |= INT1_EDGE_LOW_LEVEL;
				break;
				case LOGICAL_CHANGE:
				MCUCR |= INT1_EDGE_CHANGE;
				break;
     dc0:	08 95       	ret
				case FALLING_EDGE:
				MCUCR |= INT1_EDGE_FALLING;
     dc2:	85 b7       	in	r24, 0x35	; 53
     dc4:	88 60       	ori	r24, 0x08	; 8
     dc6:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     dc8:	80 e0       	ldi	r24, 0x00	; 0
				case LOGICAL_CHANGE:
				MCUCR |= INT1_EDGE_CHANGE;
				break;
				case FALLING_EDGE:
				MCUCR |= INT1_EDGE_FALLING;
				break;
     dca:	08 95       	ret
				case RISING_EDGE:
				MCUCR |= INT1_EDGE_RISING;
     dcc:	85 b7       	in	r24, 0x35	; 53
     dce:	8c 60       	ori	r24, 0x0C	; 12
     dd0:	85 bf       	out	0x35, r24	; 53
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     dd2:	80 e0       	ldi	r24, 0x00	; 0
				case FALLING_EDGE:
				MCUCR |= INT1_EDGE_FALLING;
				break;
				case RISING_EDGE:
				MCUCR |= INT1_EDGE_RISING;
				break;
     dd4:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
		case EXTRN_INT_2:
			MCUCSR &= ~INT2_EDGE_BITS;
     dd6:	84 b7       	in	r24, 0x34	; 52
     dd8:	8f 7b       	andi	r24, 0xBF	; 191
     dda:	84 bf       	out	0x34, r24	; 52
			switch (InterruptEvent)
     ddc:	62 30       	cpi	r22, 0x02	; 2
     dde:	19 f0       	breq	.+6      	; 0xde6 <ExternInt_SetEvent+0x94>
     de0:	63 30       	cpi	r22, 0x03	; 3
     de2:	29 f0       	breq	.+10     	; 0xdee <ExternInt_SetEvent+0x9c>
     de4:	0f c0       	rjmp	.+30     	; 0xe04 <ExternInt_SetEvent+0xb2>
			{
				case FALLING_EDGE:
				MCUCSR |= INT2_EDGE_FALLING;
     de6:	84 b7       	in	r24, 0x34	; 52
     de8:	84 bf       	out	0x34, r24	; 52
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     dea:	80 e0       	ldi	r24, 0x00	; 0
			MCUCSR &= ~INT2_EDGE_BITS;
			switch (InterruptEvent)
			{
				case FALLING_EDGE:
				MCUCSR |= INT2_EDGE_FALLING;
				break;
     dec:	08 95       	ret
				case RISING_EDGE:
				MCUCSR |= INT2_EDGE_RISING;
     dee:	84 b7       	in	r24, 0x34	; 52
     df0:	80 64       	ori	r24, 0x40	; 64
     df2:	84 bf       	out	0x34, r24	; 52
			}
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
     df4:	80 e0       	ldi	r24, 0x00	; 0
				case FALLING_EDGE:
				MCUCSR |= INT2_EDGE_FALLING;
				break;
				case RISING_EDGE:
				MCUCSR |= INT2_EDGE_RISING;
				break;
     df6:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
		default:
			return E_NOK;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	08 95       	ret
				break;
				case RISING_EDGE:
				MCUCR |= INT0_EDGE_RISING;
				break;
				default:
				return E_NOK;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	08 95       	ret
				break;
				case RISING_EDGE:
				MCUCR |= INT1_EDGE_RISING;
				break;
				default:
				return E_NOK;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	08 95       	ret
				break;
				case RISING_EDGE:
				MCUCSR |= INT2_EDGE_RISING;
				break;
				default:
				return E_NOK;
     e04:	81 e0       	ldi	r24, 0x01	; 1
			break;
		default:
			return E_NOK;
	}
	return E_OK;	
}
     e06:	08 95       	ret

00000e08 <ExternInt_Enable>:
 * Description: Enable the required external interrupt from GICR but to allow the interrupt global interrupt must be set.
 */
ERROR_STATUS 
ExternInt_Enable(uint8 ExternInt_No)
{
	sei();
     e08:	78 94       	sei
	switch(ExternInt_No)
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	49 f0       	breq	.+18     	; 0xe20 <ExternInt_Enable+0x18>
     e0e:	18 f0       	brcs	.+6      	; 0xe16 <ExternInt_Enable+0xe>
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	59 f0       	breq	.+22     	; 0xe2a <ExternInt_Enable+0x22>
     e14:	0f c0       	rjmp	.+30     	; 0xe34 <ExternInt_Enable+0x2c>
	{
		case EXTRN_INT_0:
		GICR |= INT0_GICR;
     e16:	8b b7       	in	r24, 0x3b	; 59
     e18:	80 64       	ori	r24, 0x40	; 64
     e1a:	8b bf       	out	0x3b, r24	; 59
		GICR |= INT2_GICR;
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
     e1c:	80 e0       	ldi	r24, 0x00	; 0
	sei();
	switch(ExternInt_No)
	{
		case EXTRN_INT_0:
		GICR |= INT0_GICR;
		break;
     e1e:	08 95       	ret
		case EXTRN_INT_1:
		GICR |= INT1_GICR;
     e20:	8b b7       	in	r24, 0x3b	; 59
     e22:	80 68       	ori	r24, 0x80	; 128
     e24:	8b bf       	out	0x3b, r24	; 59
		GICR |= INT2_GICR;
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
     e26:	80 e0       	ldi	r24, 0x00	; 0
		case EXTRN_INT_0:
		GICR |= INT0_GICR;
		break;
		case EXTRN_INT_1:
		GICR |= INT1_GICR;
		break;
     e28:	08 95       	ret
		case EXTRN_INT_2:
		GICR |= INT2_GICR;
     e2a:	8b b7       	in	r24, 0x3b	; 59
     e2c:	80 62       	ori	r24, 0x20	; 32
     e2e:	8b bf       	out	0x3b, r24	; 59
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
     e30:	80 e0       	ldi	r24, 0x00	; 0
		case EXTRN_INT_1:
		GICR |= INT1_GICR;
		break;
		case EXTRN_INT_2:
		GICR |= INT2_GICR;
		break;
     e32:	08 95       	ret
		default:
		return E_NOK;
     e34:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;	
}
     e36:	08 95       	ret

00000e38 <__vector_1>:
	}
	return E_OK;
}

ISR(INT0_vect)
{
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
	if (NULL != EXT_INT_CBK_PTR[EXTRN_INT_0])
     e5a:	e0 91 e9 00 	lds	r30, 0x00E9
     e5e:	f0 91 ea 00 	lds	r31, 0x00EA
     e62:	30 97       	sbiw	r30, 0x00	; 0
     e64:	09 f0       	breq	.+2      	; 0xe68 <__vector_1+0x30>
	{
		EXT_INT_CBK_PTR[EXTRN_INT_0]();
     e66:	09 95       	icall
	} 
	else
	{
		
	}
}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <__vector_2>:


ISR(INT1_vect)
{
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	2f 93       	push	r18
     e96:	3f 93       	push	r19
     e98:	4f 93       	push	r20
     e9a:	5f 93       	push	r21
     e9c:	6f 93       	push	r22
     e9e:	7f 93       	push	r23
     ea0:	8f 93       	push	r24
     ea2:	9f 93       	push	r25
     ea4:	af 93       	push	r26
     ea6:	bf 93       	push	r27
     ea8:	ef 93       	push	r30
     eaa:	ff 93       	push	r31
	if (NULL != EXT_INT_CBK_PTR[EXTRN_INT_1])
     eac:	e0 91 eb 00 	lds	r30, 0x00EB
     eb0:	f0 91 ec 00 	lds	r31, 0x00EC
     eb4:	30 97       	sbiw	r30, 0x00	; 0
     eb6:	09 f0       	breq	.+2      	; 0xeba <__vector_2+0x30>
	{
		EXT_INT_CBK_PTR[EXTRN_INT_1]();
     eb8:	09 95       	icall
	}
	else
	{
		
	}
}
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	bf 91       	pop	r27
     ec0:	af 91       	pop	r26
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	7f 91       	pop	r23
     ec8:	6f 91       	pop	r22
     eca:	5f 91       	pop	r21
     ecc:	4f 91       	pop	r20
     ece:	3f 91       	pop	r19
     ed0:	2f 91       	pop	r18
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <__vector_3>:


ISR(INT2_vect)
{
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	2f 93       	push	r18
     ee8:	3f 93       	push	r19
     eea:	4f 93       	push	r20
     eec:	5f 93       	push	r21
     eee:	6f 93       	push	r22
     ef0:	7f 93       	push	r23
     ef2:	8f 93       	push	r24
     ef4:	9f 93       	push	r25
     ef6:	af 93       	push	r26
     ef8:	bf 93       	push	r27
     efa:	ef 93       	push	r30
     efc:	ff 93       	push	r31
	if (NULL != EXT_INT_CBK_PTR[EXTRN_INT_2])
     efe:	e0 91 ed 00 	lds	r30, 0x00ED
     f02:	f0 91 ee 00 	lds	r31, 0x00EE
     f06:	30 97       	sbiw	r30, 0x00	; 0
     f08:	09 f0       	breq	.+2      	; 0xf0c <__vector_3+0x30>
	{
		EXT_INT_CBK_PTR[EXTRN_INT_2]();
     f0a:	09 95       	icall
	}
	else
	{
		
	}
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <Pwm_Init>:
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS 
Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <Pwm_Init+0x6>
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s DIO_info;
	if (NULL == Pwm_Cfg)
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <Pwm_Init+0x12>
     f3e:	ac c0       	rjmp	.+344    	; 0x1098 <Pwm_Init+0x16a>
	}
	else if (Pwm_Cfg->Prescaler < PWM_PRESCALER_NO)
	{
		return E_NOK;
	}
	else if (Pwm_Cfg->Prescaler > PWM_PRESCALER_1024)
     f40:	fc 01       	movw	r30, r24
     f42:	21 81       	ldd	r18, Z+1	; 0x01
     f44:	27 30       	cpi	r18, 0x07	; 7
     f46:	08 f0       	brcs	.+2      	; 0xf4a <Pwm_Init+0x1c>
     f48:	a9 c0       	rjmp	.+338    	; 0x109c <Pwm_Init+0x16e>
	{
		return E_NOK;
	}
	else if ((gsau8_Pwm0PrescalerTableMask[Pwm_Cfg->Prescaler] == UNUSED) && (Pwm_Cfg->Channel != PWM_CH2))
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	f9 01       	movw	r30, r18
     f4e:	ed 53       	subi	r30, 0x3D	; 61
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	40 81       	ld	r20, Z
     f54:	41 11       	cpse	r20, r1
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <Pwm_Init+0x36>
     f58:	fc 01       	movw	r30, r24
     f5a:	20 81       	ld	r18, Z
     f5c:	23 30       	cpi	r18, 0x03	; 3
     f5e:	09 f0       	breq	.+2      	; 0xf62 <Pwm_Init+0x34>
     f60:	9f c0       	rjmp	.+318    	; 0x10a0 <Pwm_Init+0x172>
     f62:	76 c0       	rjmp	.+236    	; 0x1050 <Pwm_Init+0x122>
	{
		return E_NOK;
	}
	else
	{
		switch(Pwm_Cfg->Channel)
     f64:	fc 01       	movw	r30, r24
     f66:	40 81       	ld	r20, Z
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	61 f1       	breq	.+88     	; 0xfc4 <Pwm_Init+0x96>
     f6c:	38 f0       	brcs	.+14     	; 0xf7c <Pwm_Init+0x4e>
     f6e:	42 30       	cpi	r20, 0x02	; 2
     f70:	09 f4       	brne	.+2      	; 0xf74 <Pwm_Init+0x46>
     f72:	4b c0       	rjmp	.+150    	; 0x100a <Pwm_Init+0xdc>
     f74:	43 30       	cpi	r20, 0x03	; 3
     f76:	09 f0       	breq	.+2      	; 0xf7a <Pwm_Init+0x4c>
     f78:	95 c0       	rjmp	.+298    	; 0x10a4 <Pwm_Init+0x176>
     f7a:	6a c0       	rjmp	.+212    	; 0x1050 <Pwm_Init+0x122>
		{
			case PWM_CH0:
				TCCR0 = ZERO_INITIALIZATION;
     f7c:	13 be       	out	0x33, r1	; 51
				gsau8_prescalerMask[PWM_CH0] = gsau8_Pwm0PrescalerTableMask[Pwm_Cfg->Prescaler];
     f7e:	fc 01       	movw	r30, r24
     f80:	81 81       	ldd	r24, Z+1	; 0x01
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	ed 53       	subi	r30, 0x3D	; 61
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	20 81       	ld	r18, Z
     f8c:	20 93 f7 00 	sts	0x00F7, r18
				gsau16_prescalerValue[PWM_CH0] = gsau16_Pwm0PrescalerTableValue[Pwm_Cfg->Prescaler];
     f90:	fc 01       	movw	r30, r24
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	e9 55       	subi	r30, 0x59	; 89
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	90 93 f0 00 	sts	0x00F0, r25
     fa2:	80 93 ef 00 	sts	0x00EF, r24
				TCCR0 |= T0_PWM_PHASE_AND_FREQ_CORRECT | T0_CLEAR_ON_OC;
     fa6:	83 b7       	in	r24, 0x33	; 51
     fa8:	80 66       	ori	r24, 0x60	; 96
     faa:	83 bf       	out	0x33, r24	; 51
				DIO_info.GPIO = PWM0_GPIO;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	89 83       	std	Y+1, r24	; 0x01
				DIO_info.pins = PWM0_BIT;
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	8a 83       	std	Y+2, r24	; 0x02
				DIO_info.dir = OUTPUT;
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	8b 83       	std	Y+3, r24	; 0x03
				DIO_init(&DIO_info);
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
		}
	}
	return E_OK;
     fc0:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0 |= T0_PWM_PHASE_AND_FREQ_CORRECT | T0_CLEAR_ON_OC;
				DIO_info.GPIO = PWM0_GPIO;
				DIO_info.pins = PWM0_BIT;
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
     fc2:	71 c0       	rjmp	.+226    	; 0x10a6 <Pwm_Init+0x178>
			case PWM_CH1A:
				gsau8_prescalerMask[PWM_CH1A] = gsau8_Pwm1PrescalerTableMask[Pwm_Cfg->Prescaler];
     fc4:	f9 01       	movw	r30, r18
     fc6:	e4 54       	subi	r30, 0x44	; 68
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	80 93 f8 00 	sts	0x00F8, r24
				gsau16_prescalerValue[PWM_CH1A] = gsau16_Pwm1PrescalerTableValue[Pwm_Cfg->Prescaler];
     fd0:	f9 01       	movw	r30, r18
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	e7 56       	subi	r30, 0x67	; 103
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	90 93 f2 00 	sts	0x00F2, r25
     fe2:	80 93 f1 00 	sts	0x00F1, r24
				TCCR1 |= T1_PWM_PHASE_AND_FREQ_CORRECT | T1A_CLEAR_ON_OC;
     fe6:	8e b5       	in	r24, 0x2e	; 46
     fe8:	9f b5       	in	r25, 0x2f	; 47
     fea:	80 61       	ori	r24, 0x10	; 16
     fec:	90 68       	ori	r25, 0x80	; 128
     fee:	9f bd       	out	0x2f, r25	; 47
     ff0:	8e bd       	out	0x2e, r24	; 46
				DIO_info.GPIO = PWM1A_GPIO;
     ff2:	83 e0       	ldi	r24, 0x03	; 3
     ff4:	89 83       	std	Y+1, r24	; 0x01
				DIO_info.pins = PWM1A_BIT;
     ff6:	80 e2       	ldi	r24, 0x20	; 32
     ff8:	8a 83       	std	Y+2, r24	; 0x02
				DIO_info.dir = OUTPUT;
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	8b 83       	std	Y+3, r24	; 0x03
				DIO_init(&DIO_info);
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
		}
	}
	return E_OK;
    1006:	80 e0       	ldi	r24, 0x00	; 0
				TCCR1 |= T1_PWM_PHASE_AND_FREQ_CORRECT | T1A_CLEAR_ON_OC;
				DIO_info.GPIO = PWM1A_GPIO;
				DIO_info.pins = PWM1A_BIT;
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
    1008:	4e c0       	rjmp	.+156    	; 0x10a6 <Pwm_Init+0x178>
			case PWM_CH1B:
				gsau8_prescalerMask[PWM_CH1B] = gsau8_Pwm1PrescalerTableMask[Pwm_Cfg->Prescaler];
    100a:	f9 01       	movw	r30, r18
    100c:	e4 54       	subi	r30, 0x44	; 68
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	80 93 f9 00 	sts	0x00F9, r24
				gsau16_prescalerValue[PWM_CH1B] = gsau16_Pwm1PrescalerTableValue[Pwm_Cfg->Prescaler];
    1016:	f9 01       	movw	r30, r18
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	e7 56       	subi	r30, 0x67	; 103
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	90 93 f4 00 	sts	0x00F4, r25
    1028:	80 93 f3 00 	sts	0x00F3, r24
				TCCR1 |= T1_PWM_PHASE_AND_FREQ_CORRECT | T1B_CLEAR_ON_OC;
    102c:	8e b5       	in	r24, 0x2e	; 46
    102e:	9f b5       	in	r25, 0x2f	; 47
    1030:	80 61       	ori	r24, 0x10	; 16
    1032:	90 62       	ori	r25, 0x20	; 32
    1034:	9f bd       	out	0x2f, r25	; 47
    1036:	8e bd       	out	0x2e, r24	; 46
				DIO_info.GPIO = PWM1B_GPIO;
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	89 83       	std	Y+1, r24	; 0x01
				DIO_info.pins = PWM1B_BIT;
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	8a 83       	std	Y+2, r24	; 0x02
				DIO_info.dir = OUTPUT;
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	8b 83       	std	Y+3, r24	; 0x03
				DIO_init(&DIO_info);
    1044:	ce 01       	movw	r24, r28
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
		}
	}
	return E_OK;
    104c:	80 e0       	ldi	r24, 0x00	; 0
				TCCR1 |= T1_PWM_PHASE_AND_FREQ_CORRECT | T1B_CLEAR_ON_OC;
				DIO_info.GPIO = PWM1B_GPIO;
				DIO_info.pins = PWM1B_BIT;
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
    104e:	2b c0       	rjmp	.+86     	; 0x10a6 <Pwm_Init+0x178>
			case PWM_CH2:
				TCCR2 = ZERO_INITIALIZATION;
    1050:	15 bc       	out	0x25, r1	; 37
				gsau8_prescalerMask[PWM_CH2] = gsau8_Pwm2PrescalerTableMask[Pwm_Cfg->Prescaler];
    1052:	fc 01       	movw	r30, r24
    1054:	81 81       	ldd	r24, Z+1	; 0x01
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	fc 01       	movw	r30, r24
    105a:	eb 54       	subi	r30, 0x4B	; 75
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	20 81       	ld	r18, Z
    1060:	20 93 fa 00 	sts	0x00FA, r18
				gsau16_Pwm2PrescalerTableValue[PWM_CH2] = gsau16_Pwm2PrescalerTableValue[Pwm_Cfg->Prescaler];
    1064:	fc 01       	movw	r30, r24
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	ed 59       	subi	r30, 0x9D	; 157
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	90 93 6a 00 	sts	0x006A, r25
    1076:	80 93 69 00 	sts	0x0069, r24
				TCCR2 |= T2_PWM_PHASE_AND_FREQ_CORRECT | T2_CLEAR_ON_OC;
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	80 66       	ori	r24, 0x60	; 96
    107e:	85 bd       	out	0x25, r24	; 37
				DIO_info.GPIO = PWM2_GPIO;
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	89 83       	std	Y+1, r24	; 0x01
				DIO_info.pins = PWM2_BIT;
    1084:	80 e8       	ldi	r24, 0x80	; 128
    1086:	8a 83       	std	Y+2, r24	; 0x02
				DIO_info.dir = OUTPUT;
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	8b 83       	std	Y+3, r24	; 0x03
				DIO_init(&DIO_info);
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 8b 05 	call	0xb16	; 0xb16 <DIO_init>
				break;
		}
	}
	return E_OK;
    1094:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2 |= T2_PWM_PHASE_AND_FREQ_CORRECT | T2_CLEAR_ON_OC;
				DIO_info.GPIO = PWM2_GPIO;
				DIO_info.pins = PWM2_BIT;
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <Pwm_Init+0x178>
Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
	DIO_Cfg_s DIO_info;
	if (NULL == Pwm_Cfg)
	{
		return E_NOK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <Pwm_Init+0x178>
	{
		return E_NOK;
	}
	else if (Pwm_Cfg->Prescaler > PWM_PRESCALER_1024)
	{
		return E_NOK;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <Pwm_Init+0x178>
	}
	else if ((gsau8_Pwm0PrescalerTableMask[Pwm_Cfg->Prescaler] == UNUSED) && (Pwm_Cfg->Channel != PWM_CH2))
	{
		return E_NOK;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <Pwm_Init+0x178>
				DIO_info.dir = OUTPUT;
				DIO_init(&DIO_info);
				break;
		}
	}
	return E_OK;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <Pwm_Start>:
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS 
Pwm_Start(uint8 Channel,uint8 Duty,uint32 Frequncy)
{
    10b2:	8f 92       	push	r8
    10b4:	9f 92       	push	r9
    10b6:	af 92       	push	r10
    10b8:	bf 92       	push	r11
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	cf 93       	push	r28
    10c4:	c6 2f       	mov	r28, r22
    10c6:	69 01       	movw	r12, r18
    10c8:	7a 01       	movw	r14, r20
	switch(Channel)
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	c1 f0       	breq	.+48     	; 0x10fe <Pwm_Start+0x4c>
    10ce:	38 f0       	brcs	.+14     	; 0x10de <Pwm_Start+0x2c>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <Pwm_Start+0x24>
    10d4:	44 c0       	rjmp	.+136    	; 0x115e <Pwm_Start+0xac>
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	09 f4       	brne	.+2      	; 0x10dc <Pwm_Start+0x2a>
    10da:	8e c0       	rjmp	.+284    	; 0x11f8 <Pwm_Start+0x146>
    10dc:	9d c0       	rjmp	.+314    	; 0x1218 <Pwm_Start+0x166>
	{
		case PWM_CH0:
			OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
    10de:	2f ef       	ldi	r18, 0xFF	; 255
    10e0:	62 9f       	mul	r22, r18
    10e2:	c0 01       	movw	r24, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	64 e6       	ldi	r22, 0x64	; 100
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodhi4>
    10ee:	6c bf       	out	0x3c, r22	; 60
			TCCR0 |= gsau8_prescalerMask[PWM_CH0];
    10f0:	93 b7       	in	r25, 0x33	; 51
    10f2:	80 91 f7 00 	lds	r24, 0x00F7
    10f6:	89 2b       	or	r24, r25
    10f8:	83 bf       	out	0x33, r24	; 51
			TCCR2 |= gsau8_prescalerMask[PWM_CH2];
			break;
		default:
		return E_NOK;
	}
	return E_OK;
    10fa:	80 e0       	ldi	r24, 0x00	; 0
	switch(Channel)
	{
		case PWM_CH0:
			OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
			TCCR0 |= gsau8_prescalerMask[PWM_CH0];
			break;
    10fc:	8e c0       	rjmp	.+284    	; 0x121a <Pwm_Start+0x168>
		case PWM_CH1A:
			ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
    10fe:	20 91 f1 00 	lds	r18, 0x00F1
    1102:	30 91 f2 00 	lds	r19, 0x00F2
    1106:	c9 01       	movw	r24, r18
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	9c 01       	movw	r18, r24
    110e:	ad 01       	movw	r20, r26
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	44 1f       	adc	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	c7 01       	movw	r24, r14
    111a:	b6 01       	movw	r22, r12
    111c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsi3>
    1120:	9b 01       	movw	r18, r22
    1122:	ac 01       	movw	r20, r24
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	74 e2       	ldi	r23, 0x24	; 36
    1128:	84 ef       	ldi	r24, 0xF4	; 244
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    1130:	37 bd       	out	0x27, r19	; 39
    1132:	26 bd       	out	0x26, r18	; 38
			OCR1A= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
    1134:	ac 2f       	mov	r26, r28
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__muluhisi3>
    113c:	24 e6       	ldi	r18, 0x64	; 100
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    1148:	3b bd       	out	0x2b, r19	; 43
    114a:	2a bd       	out	0x2a, r18	; 42
			TCCR1 |= gsau8_prescalerMask[PWM_CH1A];
    114c:	8e b5       	in	r24, 0x2e	; 46
    114e:	9f b5       	in	r25, 0x2f	; 47
    1150:	20 91 f8 00 	lds	r18, 0x00F8
    1154:	82 2b       	or	r24, r18
    1156:	9f bd       	out	0x2f, r25	; 47
    1158:	8e bd       	out	0x2e, r24	; 46
			TCCR2 |= gsau8_prescalerMask[PWM_CH2];
			break;
		default:
		return E_NOK;
	}
	return E_OK;
    115a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case PWM_CH1A:
			ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
			OCR1A= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
			TCCR1 |= gsau8_prescalerMask[PWM_CH1A];
			break;		
    115c:	5e c0       	rjmp	.+188    	; 0x121a <Pwm_Start+0x168>
		case PWM_CH1B:
			ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
    115e:	20 91 f1 00 	lds	r18, 0x00F1
    1162:	30 91 f2 00 	lds	r19, 0x00F2
    1166:	c9 01       	movw	r24, r18
    1168:	a0 e0       	ldi	r26, 0x00	; 0
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	9c 01       	movw	r18, r24
    116e:	ad 01       	movw	r20, r26
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	44 1f       	adc	r20, r20
    1176:	55 1f       	adc	r21, r21
    1178:	c7 01       	movw	r24, r14
    117a:	b6 01       	movw	r22, r12
    117c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsi3>
    1180:	9b 01       	movw	r18, r22
    1182:	ac 01       	movw	r20, r24
    1184:	0f 2e       	mov	r0, r31
    1186:	81 2c       	mov	r8, r1
    1188:	f4 e2       	ldi	r31, 0x24	; 36
    118a:	9f 2e       	mov	r9, r31
    118c:	f4 ef       	ldi	r31, 0xF4	; 244
    118e:	af 2e       	mov	r10, r31
    1190:	b1 2c       	mov	r11, r1
    1192:	f0 2d       	mov	r31, r0
    1194:	c5 01       	movw	r24, r10
    1196:	b4 01       	movw	r22, r8
    1198:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    119c:	37 bd       	out	0x27, r19	; 39
    119e:	26 bd       	out	0x26, r18	; 38
			OCR1B= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1B] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
    11a0:	20 91 f3 00 	lds	r18, 0x00F3
    11a4:	30 91 f4 00 	lds	r19, 0x00F4
    11a8:	c9 01       	movw	r24, r18
    11aa:	a0 e0       	ldi	r26, 0x00	; 0
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	9c 01       	movw	r18, r24
    11b0:	ad 01       	movw	r20, r26
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	44 1f       	adc	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	c7 01       	movw	r24, r14
    11bc:	b6 01       	movw	r22, r12
    11be:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsi3>
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	c5 01       	movw	r24, r10
    11c8:	b4 01       	movw	r22, r8
    11ca:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    11ce:	ac 2f       	mov	r26, r28
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__muluhisi3>
    11d6:	24 e6       	ldi	r18, 0x64	; 100
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    11e2:	39 bd       	out	0x29, r19	; 41
    11e4:	28 bd       	out	0x28, r18	; 40
			TCCR1 |= gsau8_prescalerMask[PWM_CH1B];
    11e6:	8e b5       	in	r24, 0x2e	; 46
    11e8:	9f b5       	in	r25, 0x2f	; 47
    11ea:	20 91 f9 00 	lds	r18, 0x00F9
    11ee:	82 2b       	or	r24, r18
    11f0:	9f bd       	out	0x2f, r25	; 47
    11f2:	8e bd       	out	0x2e, r24	; 46
			TCCR2 |= gsau8_prescalerMask[PWM_CH2];
			break;
		default:
		return E_NOK;
	}
	return E_OK;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
			break;		
		case PWM_CH1B:
			ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
			OCR1B= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1B] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
			TCCR1 |= gsau8_prescalerMask[PWM_CH1B];
			break;
    11f6:	11 c0       	rjmp	.+34     	; 0x121a <Pwm_Start+0x168>
		case PWM_CH2:
			OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
    11f8:	2f ef       	ldi	r18, 0xFF	; 255
    11fa:	62 9f       	mul	r22, r18
    11fc:	c0 01       	movw	r24, r0
    11fe:	11 24       	eor	r1, r1
    1200:	64 e6       	ldi	r22, 0x64	; 100
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodhi4>
    1208:	6c bf       	out	0x3c, r22	; 60
			TCCR2 |= gsau8_prescalerMask[PWM_CH2];
    120a:	95 b5       	in	r25, 0x25	; 37
    120c:	80 91 fa 00 	lds	r24, 0x00FA
    1210:	89 2b       	or	r24, r25
    1212:	85 bd       	out	0x25, r24	; 37
			break;
		default:
		return E_NOK;
	}
	return E_OK;
    1214:	80 e0       	ldi	r24, 0x00	; 0
			TCCR1 |= gsau8_prescalerMask[PWM_CH1B];
			break;
		case PWM_CH2:
			OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
			TCCR2 |= gsau8_prescalerMask[PWM_CH2];
			break;
    1216:	01 c0       	rjmp	.+2      	; 0x121a <Pwm_Start+0x168>
		default:
		return E_NOK;
    1218:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;
}
    121a:	cf 91       	pop	r28
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	08 95       	ret

0000122e <Pwm_Update>:
/*                                                                               */
/* Description: updates the duty cycle and frequency of the dedicated channel    */
/*********************************************************************************/
ERROR_STATUS 
Pwm_Update(uint8 Channel,uint8 Duty,uint32 Frequncy)
{
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	cf 93       	push	r28
    1240:	c6 2f       	mov	r28, r22
    1242:	69 01       	movw	r12, r18
    1244:	7a 01       	movw	r14, r20
	switch(Channel)
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 f0       	breq	.+36     	; 0x126e <Pwm_Update+0x40>
    124a:	30 f0       	brcs	.+12     	; 0x1258 <Pwm_Update+0x2a>
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	c1 f1       	breq	.+112    	; 0x12c0 <Pwm_Update+0x92>
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	09 f4       	brne	.+2      	; 0x1256 <Pwm_Update+0x28>
    1254:	7b c0       	rjmp	.+246    	; 0x134c <Pwm_Update+0x11e>
    1256:	85 c0       	rjmp	.+266    	; 0x1362 <Pwm_Update+0x134>
	{
		case PWM_CH0:
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
    1258:	2f ef       	ldi	r18, 0xFF	; 255
    125a:	62 9f       	mul	r22, r18
    125c:	c0 01       	movw	r24, r0
    125e:	11 24       	eor	r1, r1
    1260:	64 e6       	ldi	r22, 0x64	; 100
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodhi4>
    1268:	6c bf       	out	0x3c, r22	; 60
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
    126a:	80 e0       	ldi	r24, 0x00	; 0
{
	switch(Channel)
	{
		case PWM_CH0:
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
		break;
    126c:	7b c0       	rjmp	.+246    	; 0x1364 <Pwm_Update+0x136>
		case PWM_CH1A:
		ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
    126e:	20 91 f1 00 	lds	r18, 0x00F1
    1272:	30 91 f2 00 	lds	r19, 0x00F2
    1276:	c9 01       	movw	r24, r18
    1278:	a0 e0       	ldi	r26, 0x00	; 0
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	9c 01       	movw	r18, r24
    127e:	ad 01       	movw	r20, r26
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	44 1f       	adc	r20, r20
    1286:	55 1f       	adc	r21, r21
    1288:	c7 01       	movw	r24, r14
    128a:	b6 01       	movw	r22, r12
    128c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsi3>
    1290:	9b 01       	movw	r18, r22
    1292:	ac 01       	movw	r20, r24
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	74 e2       	ldi	r23, 0x24	; 36
    1298:	84 ef       	ldi	r24, 0xF4	; 244
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    12a0:	37 bd       	out	0x27, r19	; 39
    12a2:	26 bd       	out	0x26, r18	; 38
		OCR1A= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
    12a4:	ac 2f       	mov	r26, r28
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__muluhisi3>
    12ac:	24 e6       	ldi	r18, 0x64	; 100
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    12b8:	3b bd       	out	0x2b, r19	; 43
    12ba:	2a bd       	out	0x2a, r18	; 42
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
    12bc:	80 e0       	ldi	r24, 0x00	; 0
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
		break;
		case PWM_CH1A:
		ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
		OCR1A= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
		break;
    12be:	52 c0       	rjmp	.+164    	; 0x1364 <Pwm_Update+0x136>
		case PWM_CH1B:
		ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
    12c0:	20 91 f1 00 	lds	r18, 0x00F1
    12c4:	30 91 f2 00 	lds	r19, 0x00F2
    12c8:	c9 01       	movw	r24, r18
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	9c 01       	movw	r18, r24
    12d0:	ad 01       	movw	r20, r26
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	44 1f       	adc	r20, r20
    12d8:	55 1f       	adc	r21, r21
    12da:	c7 01       	movw	r24, r14
    12dc:	b6 01       	movw	r22, r12
    12de:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsi3>
    12e2:	9b 01       	movw	r18, r22
    12e4:	ac 01       	movw	r20, r24
    12e6:	0f 2e       	mov	r0, r31
    12e8:	81 2c       	mov	r8, r1
    12ea:	f4 e2       	ldi	r31, 0x24	; 36
    12ec:	9f 2e       	mov	r9, r31
    12ee:	f4 ef       	ldi	r31, 0xF4	; 244
    12f0:	af 2e       	mov	r10, r31
    12f2:	b1 2c       	mov	r11, r1
    12f4:	f0 2d       	mov	r31, r0
    12f6:	c5 01       	movw	r24, r10
    12f8:	b4 01       	movw	r22, r8
    12fa:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    12fe:	37 bd       	out	0x27, r19	; 39
    1300:	26 bd       	out	0x26, r18	; 38
		OCR1B= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1B] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
    1302:	20 91 f3 00 	lds	r18, 0x00F3
    1306:	30 91 f4 00 	lds	r19, 0x00F4
    130a:	c9 01       	movw	r24, r18
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	9c 01       	movw	r18, r24
    1312:	ad 01       	movw	r20, r26
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	44 1f       	adc	r20, r20
    131a:	55 1f       	adc	r21, r21
    131c:	c7 01       	movw	r24, r14
    131e:	b6 01       	movw	r22, r12
    1320:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulsi3>
    1324:	9b 01       	movw	r18, r22
    1326:	ac 01       	movw	r20, r24
    1328:	c5 01       	movw	r24, r10
    132a:	b4 01       	movw	r22, r8
    132c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    1330:	ac 2f       	mov	r26, r28
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__muluhisi3>
    1338:	24 e6       	ldi	r18, 0x64	; 100
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
    1344:	39 bd       	out	0x29, r19	; 41
    1346:	28 bd       	out	0x28, r18	; 40
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
    1348:	80 e0       	ldi	r24, 0x00	; 0
		OCR1A= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
		break;
		case PWM_CH1B:
		ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
		OCR1B= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1B] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
		break;
    134a:	0c c0       	rjmp	.+24     	; 0x1364 <Pwm_Update+0x136>
		case PWM_CH2:
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
    134c:	2f ef       	ldi	r18, 0xFF	; 255
    134e:	62 9f       	mul	r22, r18
    1350:	c0 01       	movw	r24, r0
    1352:	11 24       	eor	r1, r1
    1354:	64 e6       	ldi	r22, 0x64	; 100
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodhi4>
    135c:	6c bf       	out	0x3c, r22	; 60
		break;
		default:
		return E_NOK;
	}
	return E_OK;
    135e:	80 e0       	ldi	r24, 0x00	; 0
		ICR1 = (F_CPU)/(gsau16_prescalerValue[PWM_CH1A] * Frequncy * DOUBLE_EDGE_FREQ);
		OCR1B= (Duty * ((F_CPU)/(gsau16_prescalerValue[PWM_CH1B] * Frequncy * DOUBLE_EDGE_FREQ))) / ONE_HUNDRED_PERCENT;
		break;
		case PWM_CH2:
		OCR0 = TCNT_MAX * Duty / ONE_HUNDRED_PERCENT;
		break;
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <Pwm_Update+0x136>
		default:
		return E_NOK;
    1362:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;
}
    1364:	cf 91       	pop	r28
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	9f 90       	pop	r9
    1374:	8f 90       	pop	r8
    1376:	08 95       	ret

00001378 <Pwm_Stop>:
/*				of the corresponding channel                                     */
/*********************************************************************************/
ERROR_STATUS 
Pwm_Stop(uint8 Channel)
{
	switch(Channel)
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	61 f0       	breq	.+24     	; 0x1394 <Pwm_Stop+0x1c>
    137c:	28 f0       	brcs	.+10     	; 0x1388 <Pwm_Stop+0x10>
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	a1 f0       	breq	.+40     	; 0x13aa <Pwm_Stop+0x32>
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	e9 f0       	breq	.+58     	; 0x13c0 <Pwm_Stop+0x48>
    1386:	22 c0       	rjmp	.+68     	; 0x13cc <Pwm_Stop+0x54>
	{
		case PWM_CH0:
		OCR0 = ZERO_INITIALIZATION;
    1388:	1c be       	out	0x3c, r1	; 60
		TCCR0 &= ~ PRESCALER_BITS;
    138a:	83 b7       	in	r24, 0x33	; 51
    138c:	88 7f       	andi	r24, 0xF8	; 248
    138e:	83 bf       	out	0x33, r24	; 51
		TCCR2 &= ~ PRESCALER_BITS;
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
    1390:	80 e0       	ldi	r24, 0x00	; 0
	switch(Channel)
	{
		case PWM_CH0:
		OCR0 = ZERO_INITIALIZATION;
		TCCR0 &= ~ PRESCALER_BITS;
		break;
    1392:	08 95       	ret
		case PWM_CH1A:
		ICR1 = ZERO_INITIALIZATION;
    1394:	17 bc       	out	0x27, r1	; 39
    1396:	16 bc       	out	0x26, r1	; 38
		OCR1A = ZERO_INITIALIZATION;
    1398:	1b bc       	out	0x2b, r1	; 43
    139a:	1a bc       	out	0x2a, r1	; 42
		TCCR1 &= ~ PRESCALER_BITS;
    139c:	8e b5       	in	r24, 0x2e	; 46
    139e:	9f b5       	in	r25, 0x2f	; 47
    13a0:	88 7f       	andi	r24, 0xF8	; 248
    13a2:	9f bd       	out	0x2f, r25	; 47
    13a4:	8e bd       	out	0x2e, r24	; 46
		TCCR2 &= ~ PRESCALER_BITS;
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
    13a6:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case PWM_CH1A:
		ICR1 = ZERO_INITIALIZATION;
		OCR1A = ZERO_INITIALIZATION;
		TCCR1 &= ~ PRESCALER_BITS;
		break;
    13a8:	08 95       	ret
		case PWM_CH1B:
		ICR1 = ZERO_INITIALIZATION;
    13aa:	17 bc       	out	0x27, r1	; 39
    13ac:	16 bc       	out	0x26, r1	; 38
		OCR1B= ZERO_INITIALIZATION;
    13ae:	19 bc       	out	0x29, r1	; 41
    13b0:	18 bc       	out	0x28, r1	; 40
		TCCR1 &= ~ PRESCALER_BITS;
    13b2:	8e b5       	in	r24, 0x2e	; 46
    13b4:	9f b5       	in	r25, 0x2f	; 47
    13b6:	88 7f       	andi	r24, 0xF8	; 248
    13b8:	9f bd       	out	0x2f, r25	; 47
    13ba:	8e bd       	out	0x2e, r24	; 46
		TCCR2 &= ~ PRESCALER_BITS;
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
    13bc:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case PWM_CH1B:
		ICR1 = ZERO_INITIALIZATION;
		OCR1B= ZERO_INITIALIZATION;
		TCCR1 &= ~ PRESCALER_BITS;
		break;
    13be:	08 95       	ret
		case PWM_CH2:
		OCR0 = ZERO_INITIALIZATION;
    13c0:	1c be       	out	0x3c, r1	; 60
		TCCR2 &= ~ PRESCALER_BITS;
    13c2:	85 b5       	in	r24, 0x25	; 37
    13c4:	88 7f       	andi	r24, 0xF8	; 248
    13c6:	85 bd       	out	0x25, r24	; 37
		break;
		default:
		return E_NOK;
	}
	return E_OK;	
    13c8:	80 e0       	ldi	r24, 0x00	; 0
		TCCR1 &= ~ PRESCALER_BITS;
		break;
		case PWM_CH2:
		OCR0 = ZERO_INITIALIZATION;
		TCCR2 &= ~ PRESCALER_BITS;
		break;
    13ca:	08 95       	ret
		default:
		return E_NOK;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;	
    13ce:	08 95       	ret

000013d0 <Timer_Init>:
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS 
Timer_Init(Timer_cfg_s* Timer_cfg)
{
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
	switch(Timer_cfg->Timer_CH_NO)
    13d6:	88 81       	ld	r24, Y
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	09 f4       	brne	.+2      	; 0x13de <Timer_Init+0xe>
    13dc:	60 c0       	rjmp	.+192    	; 0x149e <Timer_Init+0xce>
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <Timer_Init+0x18>
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <Timer_Init+0x16>
    13e4:	b8 c0       	rjmp	.+368    	; 0x1556 <Timer_Init+0x186>
    13e6:	0f c1       	rjmp	.+542    	; 0x1606 <Timer_Init+0x236>
	{  
		case (TIMER_CH0) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	21 f0       	breq	.+8      	; 0x13f8 <Timer_Init+0x28>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH0] = Timer_cfg->Timer_Cbk_ptr;
    13f0:	90 93 fc 00 	sts	0x00FC, r25
    13f4:	80 93 fb 00 	sts	0x00FB, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	b1 f1       	breq	.+108    	; 0x146a <Timer_Init+0x9a>
    13fe:	18 f0       	brcs	.+6      	; 0x1406 <Timer_Init+0x36>
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	d1 f1       	breq	.+116    	; 0x1478 <Timer_Init+0xa8>
    1404:	00 c1       	rjmp	.+512    	; 0x1606 <Timer_Init+0x236>
		{
			case(TIMER_MODE):
			TCCR0 = ZERO_INITIALIZATION;
    1406:	13 be       	out	0x33, r1	; 51
			switch(Timer_cfg->Timer_Prescaler)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	c9 f0       	breq	.+50     	; 0x1440 <Timer_Init+0x70>
    140e:	28 f4       	brcc	.+10     	; 0x141a <Timer_Init+0x4a>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	41 f0       	breq	.+16     	; 0x1424 <Timer_Init+0x54>
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	69 f0       	breq	.+26     	; 0x1432 <Timer_Init+0x62>
    1418:	f6 c0       	rjmp	.+492    	; 0x1606 <Timer_Init+0x236>
    141a:	86 30       	cpi	r24, 0x06	; 6
    141c:	c1 f0       	breq	.+48     	; 0x144e <Timer_Init+0x7e>
    141e:	87 30       	cpi	r24, 0x07	; 7
    1420:	e9 f0       	breq	.+58     	; 0x145c <Timer_Init+0x8c>
    1422:	f1 c0       	rjmp	.+482    	; 0x1606 <Timer_Init+0x236>
			{
				case(TIMER_PRESCALER_NO) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
    1424:	a8 81       	ld	r26, Y
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ac 5f       	subi	r26, 0xFC	; 252
    142a:	be 4f       	sbci	r27, 0xFE	; 254
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	8c 93       	st	X, r24
				break;
    1430:	29 c0       	rjmp	.+82     	; 0x1484 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_8) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
    1432:	a8 81       	ld	r26, Y
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ac 5f       	subi	r26, 0xFC	; 252
    1438:	be 4f       	sbci	r27, 0xFE	; 254
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	8c 93       	st	X, r24
				break;
    143e:	22 c0       	rjmp	.+68     	; 0x1484 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_64) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
    1440:	a8 81       	ld	r26, Y
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ac 5f       	subi	r26, 0xFC	; 252
    1446:	be 4f       	sbci	r27, 0xFE	; 254
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	8c 93       	st	X, r24
				break;
    144c:	1b c0       	rjmp	.+54     	; 0x1484 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_256) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
    144e:	a8 81       	ld	r26, Y
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ac 5f       	subi	r26, 0xFC	; 252
    1454:	be 4f       	sbci	r27, 0xFE	; 254
    1456:	84 e0       	ldi	r24, 0x04	; 4
    1458:	8c 93       	st	X, r24
				break;
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <Timer_Init+0xb4>
				case(TIMER_PRESCALER_1024) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
    145c:	a8 81       	ld	r26, Y
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	ac 5f       	subi	r26, 0xFC	; 252
    1462:	be 4f       	sbci	r27, 0xFE	; 254
    1464:	85 e0       	ldi	r24, 0x05	; 5
    1466:	8c 93       	st	X, r24
				break;
    1468:	0d c0       	rjmp	.+26     	; 0x1484 <Timer_Init+0xb4>
				default :
				return E_NOK;
			}
			break;
			case (COUNTER_RISING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
    146a:	a8 81       	ld	r26, Y
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ac 5f       	subi	r26, 0xFC	; 252
    1470:	be 4f       	sbci	r27, 0xFE	; 254
    1472:	87 e0       	ldi	r24, 0x07	; 7
    1474:	8c 93       	st	X, r24
			break;
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <Timer_Init+0xb4>
			
			case (COUNTER_FALLING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
    1478:	a8 81       	ld	r26, Y
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ac 5f       	subi	r26, 0xFC	; 252
    147e:	be 4f       	sbci	r27, 0xFE	; 254
    1480:	86 e0       	ldi	r24, 0x06	; 6
    1482:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	88 23       	and	r24, r24
    1488:	39 f0       	breq	.+14     	; 0x1498 <Timer_Init+0xc8>
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	09 f0       	breq	.+2      	; 0x1490 <Timer_Init+0xc0>
    148e:	bb c0       	rjmp	.+374    	; 0x1606 <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE):
			TIMSK |= SHIFT_ONE;
    1490:	89 b7       	in	r24, 0x39	; 57
    1492:	81 60       	ori	r24, 0x01	; 1
    1494:	89 bf       	out	0x39, r24	; 57
			break;
    1496:	b7 c0       	rjmp	.+366    	; 0x1606 <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= ZERO_INITIALIZATION;
    1498:	89 b7       	in	r24, 0x39	; 57
    149a:	89 bf       	out	0x39, r24	; 57
			break;
    149c:	b4 c0       	rjmp	.+360    	; 0x1606 <Timer_Init+0x236>
			default :
			return E_NOK;
		}
		break;
		case (TIMER_CH1) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	21 f0       	breq	.+8      	; 0x14ae <Timer_Init+0xde>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH1] = Timer_cfg->Timer_Cbk_ptr;
    14a6:	90 93 fe 00 	sts	0x00FE, r25
    14aa:	80 93 fd 00 	sts	0x00FD, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	b9 f1       	breq	.+110    	; 0x1522 <Timer_Init+0x152>
    14b4:	18 f0       	brcs	.+6      	; 0x14bc <Timer_Init+0xec>
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	d9 f1       	breq	.+118    	; 0x1530 <Timer_Init+0x160>
    14ba:	a5 c0       	rjmp	.+330    	; 0x1606 <Timer_Init+0x236>
		{
			case(TIMER_MODE):
			TCCR1 = ZERO_INITIALIZATION;
    14bc:	1f bc       	out	0x2f, r1	; 47
    14be:	1e bc       	out	0x2e, r1	; 46
			switch(Timer_cfg->Timer_Prescaler)
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	c9 f0       	breq	.+50     	; 0x14f8 <Timer_Init+0x128>
    14c6:	28 f4       	brcc	.+10     	; 0x14d2 <Timer_Init+0x102>
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	41 f0       	breq	.+16     	; 0x14dc <Timer_Init+0x10c>
    14cc:	82 30       	cpi	r24, 0x02	; 2
    14ce:	69 f0       	breq	.+26     	; 0x14ea <Timer_Init+0x11a>
    14d0:	9a c0       	rjmp	.+308    	; 0x1606 <Timer_Init+0x236>
    14d2:	86 30       	cpi	r24, 0x06	; 6
    14d4:	c1 f0       	breq	.+48     	; 0x1506 <Timer_Init+0x136>
    14d6:	87 30       	cpi	r24, 0x07	; 7
    14d8:	e9 f0       	breq	.+58     	; 0x1514 <Timer_Init+0x144>
    14da:	95 c0       	rjmp	.+298    	; 0x1606 <Timer_Init+0x236>
			{
				case(TIMER_PRESCALER_NO) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
    14dc:	a8 81       	ld	r26, Y
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ac 5f       	subi	r26, 0xFC	; 252
    14e2:	be 4f       	sbci	r27, 0xFE	; 254
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	8c 93       	st	X, r24
				break;
    14e8:	29 c0       	rjmp	.+82     	; 0x153c <Timer_Init+0x16c>
				case(TIMER_PRESCALER_8) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
    14ea:	a8 81       	ld	r26, Y
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ac 5f       	subi	r26, 0xFC	; 252
    14f0:	be 4f       	sbci	r27, 0xFE	; 254
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	8c 93       	st	X, r24
				break;
    14f6:	22 c0       	rjmp	.+68     	; 0x153c <Timer_Init+0x16c>
				case(TIMER_PRESCALER_64) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
    14f8:	a8 81       	ld	r26, Y
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ac 5f       	subi	r26, 0xFC	; 252
    14fe:	be 4f       	sbci	r27, 0xFE	; 254
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	8c 93       	st	X, r24
				break;
    1504:	1b c0       	rjmp	.+54     	; 0x153c <Timer_Init+0x16c>
				case(TIMER_PRESCALER_256) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
    1506:	a8 81       	ld	r26, Y
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ac 5f       	subi	r26, 0xFC	; 252
    150c:	be 4f       	sbci	r27, 0xFE	; 254
    150e:	84 e0       	ldi	r24, 0x04	; 4
    1510:	8c 93       	st	X, r24
				break;
    1512:	14 c0       	rjmp	.+40     	; 0x153c <Timer_Init+0x16c>
				case(TIMER_PRESCALER_1024) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
    1514:	a8 81       	ld	r26, Y
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ac 5f       	subi	r26, 0xFC	; 252
    151a:	be 4f       	sbci	r27, 0xFE	; 254
    151c:	85 e0       	ldi	r24, 0x05	; 5
    151e:	8c 93       	st	X, r24
				break;
    1520:	0d c0       	rjmp	.+26     	; 0x153c <Timer_Init+0x16c>
				return E_NOK;
			}
			break;
			
			case (COUNTER_RISING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
    1522:	a8 81       	ld	r26, Y
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ac 5f       	subi	r26, 0xFC	; 252
    1528:	be 4f       	sbci	r27, 0xFE	; 254
    152a:	87 e0       	ldi	r24, 0x07	; 7
    152c:	8c 93       	st	X, r24
			break;
    152e:	06 c0       	rjmp	.+12     	; 0x153c <Timer_Init+0x16c>
			
			case (COUNTER_FALLING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
    1530:	a8 81       	ld	r26, Y
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ac 5f       	subi	r26, 0xFC	; 252
    1536:	be 4f       	sbci	r27, 0xFE	; 254
    1538:	86 e0       	ldi	r24, 0x06	; 6
    153a:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	88 23       	and	r24, r24
    1540:	39 f0       	breq	.+14     	; 0x1550 <Timer_Init+0x180>
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	09 f0       	breq	.+2      	; 0x1548 <Timer_Init+0x178>
    1546:	5f c0       	rjmp	.+190    	; 0x1606 <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE ) :
			TIMSK |= SHIFT_FOUR;
    1548:	89 b7       	in	r24, 0x39	; 57
    154a:	84 60       	ori	r24, 0x04	; 4
    154c:	89 bf       	out	0x39, r24	; 57
			break;
    154e:	5b c0       	rjmp	.+182    	; 0x1606 <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= ZERO_INITIALIZATION;
    1550:	89 b7       	in	r24, 0x39	; 57
    1552:	89 bf       	out	0x39, r24	; 57
			break;
    1554:	58 c0       	rjmp	.+176    	; 0x1606 <Timer_Init+0x236>
			default :
			return E_NOK;
		}
		break;
		case (TIMER_CH2) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	21 f0       	breq	.+8      	; 0x1566 <Timer_Init+0x196>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH2] = Timer_cfg->Timer_Cbk_ptr;
    155e:	90 93 00 01 	sts	0x0100, r25
    1562:	80 93 ff 00 	sts	0x00FF, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	88 23       	and	r24, r24
    156a:	21 f0       	breq	.+8      	; 0x1574 <Timer_Init+0x1a4>
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	08 f0       	brcs	.+2      	; 0x1572 <Timer_Init+0x1a2>
    1570:	4a c0       	rjmp	.+148    	; 0x1606 <Timer_Init+0x236>
    1572:	3e c0       	rjmp	.+124    	; 0x15f0 <Timer_Init+0x220>
		{
			case(TIMER_MODE):
			TCCR2 = ZERO_INITIALIZATION;
    1574:	15 bc       	out	0x25, r1	; 37
		switch(Timer_cfg->Timer_Prescaler)
    1576:	4b 81       	ldd	r20, Y+3	; 0x03
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	41 50       	subi	r20, 0x01	; 1
    157c:	51 09       	sbc	r21, r1
    157e:	47 30       	cpi	r20, 0x07	; 7
    1580:	51 05       	cpc	r21, r1
    1582:	08 f0       	brcs	.+2      	; 0x1586 <Timer_Init+0x1b6>
    1584:	40 c0       	rjmp	.+128    	; 0x1606 <Timer_Init+0x236>
    1586:	46 5d       	subi	r20, 0xD6	; 214
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	fa 01       	movw	r30, r20
    158c:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__tablejump2__>
		{
			case(TIMER_PRESCALER_NO) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
    1590:	a8 81       	ld	r26, Y
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ac 5f       	subi	r26, 0xFC	; 252
    1596:	be 4f       	sbci	r27, 0xFE	; 254
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	8c 93       	st	X, r24
			break;
    159c:	29 c0       	rjmp	.+82     	; 0x15f0 <Timer_Init+0x220>
			case(TIMER_PRESCALER_8) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
    159e:	a8 81       	ld	r26, Y
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ac 5f       	subi	r26, 0xFC	; 252
    15a4:	be 4f       	sbci	r27, 0xFE	; 254
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	8c 93       	st	X, r24
			break;
    15aa:	22 c0       	rjmp	.+68     	; 0x15f0 <Timer_Init+0x220>
			case(TIMER_PRESCALER_32) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
    15ac:	a8 81       	ld	r26, Y
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ac 5f       	subi	r26, 0xFC	; 252
    15b2:	be 4f       	sbci	r27, 0xFE	; 254
    15b4:	83 e0       	ldi	r24, 0x03	; 3
    15b6:	8c 93       	st	X, r24
			break;
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <Timer_Init+0x220>
			case(TIMER_PRESCALER_64) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
    15ba:	a8 81       	ld	r26, Y
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ac 5f       	subi	r26, 0xFC	; 252
    15c0:	be 4f       	sbci	r27, 0xFE	; 254
    15c2:	84 e0       	ldi	r24, 0x04	; 4
    15c4:	8c 93       	st	X, r24
			break;
    15c6:	14 c0       	rjmp	.+40     	; 0x15f0 <Timer_Init+0x220>
			case(TIMER_PRESCALER_128) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
    15c8:	a8 81       	ld	r26, Y
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ac 5f       	subi	r26, 0xFC	; 252
    15ce:	be 4f       	sbci	r27, 0xFE	; 254
    15d0:	85 e0       	ldi	r24, 0x05	; 5
    15d2:	8c 93       	st	X, r24
			break;
    15d4:	0d c0       	rjmp	.+26     	; 0x15f0 <Timer_Init+0x220>
			case(TIMER_PRESCALER_256) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
    15d6:	a8 81       	ld	r26, Y
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ac 5f       	subi	r26, 0xFC	; 252
    15dc:	be 4f       	sbci	r27, 0xFE	; 254
    15de:	86 e0       	ldi	r24, 0x06	; 6
    15e0:	8c 93       	st	X, r24
			break;
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <Timer_Init+0x220>
			case(TIMER_PRESCALER_1024) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
    15e4:	a8 81       	ld	r26, Y
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ac 5f       	subi	r26, 0xFC	; 252
    15ea:	be 4f       	sbci	r27, 0xFE	; 254
    15ec:	87 e0       	ldi	r24, 0x07	; 7
    15ee:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	88 23       	and	r24, r24
    15f4:	31 f0       	breq	.+12     	; 0x1602 <Timer_Init+0x232>
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	31 f4       	brne	.+12     	; 0x1606 <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE ) :
			TIMSK |= SHIFT_TIMER_INTERRUPT_MODE;
    15fa:	89 b7       	in	r24, 0x39	; 57
    15fc:	80 64       	ori	r24, 0x40	; 64
    15fe:	89 bf       	out	0x39, r24	; 57
			break;
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= SHIFT_ZERO;
    1602:	89 b7       	in	r24, 0x39	; 57
    1604:	89 bf       	out	0x39, r24	; 57
		default :
		return E_NOK;
		
	}
	return E_NOK;
}
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	08 95       	ret

0000160e <Timer_Start>:
 * 							
 */
ERROR_STATUS 
Timer_Start(uint8 Timer_CH_NO, uint16 Timer_Count)
{
	switch (Timer_CH_NO)
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	01 f1       	breq	.+64     	; 0x1652 <Timer_Start+0x44>
    1612:	18 f0       	brcs	.+6      	; 0x161a <Timer_Start+0xc>
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	d1 f1       	breq	.+116    	; 0x168c <Timer_Start+0x7e>
    1618:	4e c0       	rjmp	.+156    	; 0x16b6 <Timer_Start+0xa8>
	{
		case TIMER_CH0:
		if (Timer_Count > TCNT0_MAX)
    161a:	6f 3f       	cpi	r22, 0xFF	; 255
    161c:	71 05       	cpc	r23, r1
    161e:	11 f0       	breq	.+4      	; 0x1624 <Timer_Start+0x16>
    1620:	08 f0       	brcs	.+2      	; 0x1624 <Timer_Start+0x16>
    1622:	4b c0       	rjmp	.+150    	; 0x16ba <Timer_Start+0xac>
		{
			return E_NOK;
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
    1624:	90 91 04 01 	lds	r25, 0x0104
    1628:	99 23       	and	r25, r25
    162a:	09 f4       	brne	.+2      	; 0x162e <Timer_Start+0x20>
    162c:	48 c0       	rjmp	.+144    	; 0x16be <Timer_Start+0xb0>
		{
			return E_NOK;
		}
		else if ((gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SEVEN)||(gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SIX))
    162e:	96 50       	subi	r25, 0x06	; 6
    1630:	92 30       	cpi	r25, 0x02	; 2
    1632:	38 f4       	brcc	.+14     	; 0x1642 <Timer_Start+0x34>
		{
			TCNT0 = ZERO_INITIALIZATION;
    1634:	12 be       	out	0x32, r1	; 50
			TCCR0 |= gu8_TimerPrescaler[Timer_CH_NO];
    1636:	23 b7       	in	r18, 0x33	; 51
    1638:	90 91 04 01 	lds	r25, 0x0104
    163c:	92 2b       	or	r25, r18
    163e:	93 bf       	out	0x33, r25	; 51
    1640:	32 c0       	rjmp	.+100    	; 0x16a6 <Timer_Start+0x98>
		}
		else 
		{
			TCNT0 = TCNT0_MAX - Timer_Count;
    1642:	60 95       	com	r22
    1644:	62 bf       	out	0x32, r22	; 50
			TCCR0 |= gu8_TimerPrescaler[Timer_CH_NO];
    1646:	23 b7       	in	r18, 0x33	; 51
    1648:	90 91 04 01 	lds	r25, 0x0104
    164c:	92 2b       	or	r25, r18
    164e:	93 bf       	out	0x33, r25	; 51
    1650:	2a c0       	rjmp	.+84     	; 0x16a6 <Timer_Start+0x98>
		}
		break;
		
		case TIMER_CH1:
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
    1652:	90 91 05 01 	lds	r25, 0x0105
    1656:	99 23       	and	r25, r25
    1658:	a1 f1       	breq	.+104    	; 0x16c2 <Timer_Start+0xb4>
		{
			return E_NOK;
		}
		else if ((gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SEVEN)||(gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SIX))
    165a:	96 50       	subi	r25, 0x06	; 6
    165c:	92 30       	cpi	r25, 0x02	; 2
    165e:	50 f4       	brcc	.+20     	; 0x1674 <Timer_Start+0x66>
		{
			TCNT1 = ZERO_INITIALIZATION;
    1660:	1d bc       	out	0x2d, r1	; 45
    1662:	1c bc       	out	0x2c, r1	; 44
			TCCR1 |= gu8_TimerPrescaler[Timer_CH_NO];
    1664:	2e b5       	in	r18, 0x2e	; 46
    1666:	3f b5       	in	r19, 0x2f	; 47
    1668:	90 91 05 01 	lds	r25, 0x0105
    166c:	29 2b       	or	r18, r25
    166e:	3f bd       	out	0x2f, r19	; 47
    1670:	2e bd       	out	0x2e, r18	; 46
    1672:	19 c0       	rjmp	.+50     	; 0x16a6 <Timer_Start+0x98>
		}
		else 
		{
			TCNT1 = TCNT1_MAX - Timer_Count;
    1674:	60 95       	com	r22
    1676:	70 95       	com	r23
    1678:	7d bd       	out	0x2d, r23	; 45
    167a:	6c bd       	out	0x2c, r22	; 44
			TCCR1 |= gu8_TimerPrescaler[Timer_CH_NO];
    167c:	2e b5       	in	r18, 0x2e	; 46
    167e:	3f b5       	in	r19, 0x2f	; 47
    1680:	90 91 05 01 	lds	r25, 0x0105
    1684:	29 2b       	or	r18, r25
    1686:	3f bd       	out	0x2f, r19	; 47
    1688:	2e bd       	out	0x2e, r18	; 46
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <Timer_Start+0x98>
		}
		break;
		
		case TIMER_CH2:
		if (Timer_Count > TCNT2_MAX)
    168c:	6f 3f       	cpi	r22, 0xFF	; 255
    168e:	71 05       	cpc	r23, r1
    1690:	09 f0       	breq	.+2      	; 0x1694 <Timer_Start+0x86>
    1692:	c8 f4       	brcc	.+50     	; 0x16c6 <Timer_Start+0xb8>
		{
			return E_NOK;
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
    1694:	90 91 06 01 	lds	r25, 0x0106
    1698:	99 23       	and	r25, r25
    169a:	b9 f0       	breq	.+46     	; 0x16ca <Timer_Start+0xbc>
		{
			return E_NOK;
		}
		else 
		{
			TCNT2 = TCNT2_MAX - Timer_Count;
    169c:	60 95       	com	r22
    169e:	64 bd       	out	0x24, r22	; 36
			TCCR2 |= gu8_TimerPrescaler[Timer_CH_NO];
    16a0:	25 b5       	in	r18, 0x25	; 37
    16a2:	92 2b       	or	r25, r18
    16a4:	95 bd       	out	0x25, r25	; 37
		}
		break;
		default:
		return E_NOK;
	}
	gu8_started_state[Timer_CH_NO] = ONE_INITIALIZATION;
    16a6:	e8 2f       	mov	r30, r24
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	ef 5f       	subi	r30, 0xFF	; 255
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 83       	st	Z, r24
	return E_OK;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	08 95       	ret
			TCNT2 = TCNT2_MAX - Timer_Count;
			TCCR2 |= gu8_TimerPrescaler[Timer_CH_NO];
		}
		break;
		default:
		return E_NOK;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	08 95       	ret
	switch (Timer_CH_NO)
	{
		case TIMER_CH0:
		if (Timer_Count > TCNT0_MAX)
		{
			return E_NOK;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	08 95       	ret
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	08 95       	ret
		break;
		
		case TIMER_CH1:
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	08 95       	ret
		break;
		
		case TIMER_CH2:
		if (Timer_Count > TCNT2_MAX)
		{
			return E_NOK;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	08 95       	ret
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return E_NOK;
	}
	gu8_started_state[Timer_CH_NO] = ONE_INITIALIZATION;
	return E_OK;
}
    16cc:	08 95       	ret

000016ce <Timer_Stop>:
 * Description: This function stops the needed timer.
 * 							
 */
ERROR_STATUS 
Timer_Stop(uint8 Timer_CH_NO){
	if (Timer_CH_NO>NO_OF_TIMERS - 1)
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	08 f5       	brcc	.+66     	; 0x1714 <Timer_Stop+0x46>
	{
		return E_NOK;
	}
	else
	{
		if (gu8_started_state[Timer_CH_NO] == ONE_INITIALIZATION)
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	f9 01       	movw	r30, r18
    16d8:	ef 5f       	subi	r30, 0xFF	; 255
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	90 81       	ld	r25, Z
    16de:	91 30       	cpi	r25, 0x01	; 1
    16e0:	d9 f4       	brne	.+54     	; 0x1718 <Timer_Stop+0x4a>
		{
			switch (Timer_CH_NO)
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	41 f0       	breq	.+16     	; 0x16f6 <Timer_Stop+0x28>
    16e6:	18 f0       	brcs	.+6      	; 0x16ee <Timer_Stop+0x20>
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	59 f0       	breq	.+22     	; 0x1702 <Timer_Stop+0x34>
    16ec:	17 c0       	rjmp	.+46     	; 0x171c <Timer_Stop+0x4e>
			{
				case TIMER_CH0:
				TCCR0 &= ~(TIMER_PRESCALER_BITS);
    16ee:	83 b7       	in	r24, 0x33	; 51
    16f0:	88 7f       	andi	r24, 0xF8	; 248
    16f2:	83 bf       	out	0x33, r24	; 51
				break;
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <Timer_Stop+0x3a>
				case TIMER_CH1:
				TCCR1 &= ~(TIMER_PRESCALER_BITS);
    16f6:	8e b5       	in	r24, 0x2e	; 46
    16f8:	9f b5       	in	r25, 0x2f	; 47
    16fa:	88 7f       	andi	r24, 0xF8	; 248
    16fc:	9f bd       	out	0x2f, r25	; 47
    16fe:	8e bd       	out	0x2e, r24	; 46
				break;
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <Timer_Stop+0x3a>
				case TIMER_CH2:
				TCCR2 &= ~(TIMER_PRESCALER_BITS);
    1702:	85 b5       	in	r24, 0x25	; 37
    1704:	88 7f       	andi	r24, 0xF8	; 248
    1706:	85 bd       	out	0x25, r24	; 37
				break;
				default:
				return E_NOK;
			}
			gu8_started_state[Timer_CH_NO] = ZERO_INITIALIZATION;
    1708:	f9 01       	movw	r30, r18
    170a:	ef 5f       	subi	r30, 0xFF	; 255
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	10 82       	st	Z, r1
		}
		else
		{
			return E_NOK;
		}
		return E_OK;	
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	08 95       	ret
 */
ERROR_STATUS 
Timer_Stop(uint8 Timer_CH_NO){
	if (Timer_CH_NO>NO_OF_TIMERS - 1)
	{
		return E_NOK;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	08 95       	ret
			}
			gu8_started_state[Timer_CH_NO] = ZERO_INITIALIZATION;
		}
		else
		{
			return E_NOK;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	08 95       	ret
				break;
				case TIMER_CH2:
				TCCR2 &= ~(TIMER_PRESCALER_BITS);
				break;
				default:
				return E_NOK;
    171c:	81 e0       	ldi	r24, 0x01	; 1
		{
			return E_NOK;
		}
		return E_OK;	
	}
}
    171e:	08 95       	ret

00001720 <Timer_GetValue>:
 * 							
 */
ERROR_STATUS 
Timer_GetValue(uint8 Timer_CH_NO, uint16* Data)
{
	*Data = ZERO_INITIALIZATION;
    1720:	fb 01       	movw	r30, r22
    1722:	11 82       	std	Z+1, r1	; 0x01
    1724:	10 82       	st	Z, r1
	if (Timer_CH_NO > NO_OF_TIMERS - 1)
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	d8 f4       	brcc	.+54     	; 0x1760 <Timer_GetValue+0x40>
	{
		return E_NOK;
	}
	else
	{
		switch (Timer_CH_NO)
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	59 f0       	breq	.+22     	; 0x1744 <Timer_GetValue+0x24>
    172e:	18 f0       	brcs	.+6      	; 0x1736 <Timer_GetValue+0x16>
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	79 f0       	breq	.+30     	; 0x1752 <Timer_GetValue+0x32>
    1734:	17 c0       	rjmp	.+46     	; 0x1764 <Timer_GetValue+0x44>
		{
			case TIMER_CH0:
				*Data = TCNT0;
    1736:	82 b7       	in	r24, 0x32	; 50
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	fb 01       	movw	r30, r22
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
    1740:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Timer_CH_NO)
		{
			case TIMER_CH0:
				*Data = TCNT0;
				break;
    1742:	08 95       	ret
			case TIMER_CH1:
				*Data = TCNT1;
    1744:	8c b5       	in	r24, 0x2c	; 44
    1746:	9d b5       	in	r25, 0x2d	; 45
    1748:	fb 01       	movw	r30, r22
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
    174e:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH0:
				*Data = TCNT0;
				break;
			case TIMER_CH1:
				*Data = TCNT1;
				break;
    1750:	08 95       	ret
			case TIMER_CH2:
				*Data = TCNT2;
    1752:	84 b5       	in	r24, 0x24	; 36
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	fb 01       	movw	r30, r22
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
				break;
			default:
				return E_NOK;
		}
	}
	return E_OK;
    175c:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH1:
				*Data = TCNT1;
				break;
			case TIMER_CH2:
				*Data = TCNT2;
				break;
    175e:	08 95       	ret
Timer_GetValue(uint8 Timer_CH_NO, uint16* Data)
{
	*Data = ZERO_INITIALIZATION;
	if (Timer_CH_NO > NO_OF_TIMERS - 1)
	{
		return E_NOK;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	08 95       	ret
				break;
			case TIMER_CH2:
				*Data = TCNT2;
				break;
			default:
				return E_NOK;
    1764:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return E_OK;
}
    1766:	08 95       	ret

00001768 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	2f 93       	push	r18
    1774:	3f 93       	push	r19
    1776:	4f 93       	push	r20
    1778:	5f 93       	push	r21
    177a:	6f 93       	push	r22
    177c:	7f 93       	push	r23
    177e:	8f 93       	push	r24
    1780:	9f 93       	push	r25
    1782:	af 93       	push	r26
    1784:	bf 93       	push	r27
    1786:	ef 93       	push	r30
    1788:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH0])
    178a:	e0 91 fb 00 	lds	r30, 0x00FB
    178e:	f0 91 fc 00 	lds	r31, 0x00FC
    1792:	30 97       	sbiw	r30, 0x00	; 0
    1794:	09 f0       	breq	.+2      	; 0x1798 <__vector_11+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH0]();
    1796:	09 95       	icall
	} 
	else
	{
		
	}
}
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	4f 93       	push	r20
    17ca:	5f 93       	push	r21
    17cc:	6f 93       	push	r22
    17ce:	7f 93       	push	r23
    17d0:	8f 93       	push	r24
    17d2:	9f 93       	push	r25
    17d4:	af 93       	push	r26
    17d6:	bf 93       	push	r27
    17d8:	ef 93       	push	r30
    17da:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH1])
    17dc:	e0 91 fd 00 	lds	r30, 0x00FD
    17e0:	f0 91 fe 00 	lds	r31, 0x00FE
    17e4:	30 97       	sbiw	r30, 0x00	; 0
    17e6:	09 f0       	breq	.+2      	; 0x17ea <__vector_9+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH1]();
    17e8:	09 95       	icall
	}
	else
	{
		
	}
}
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH2])
    182e:	e0 91 ff 00 	lds	r30, 0x00FF
    1832:	f0 91 00 01 	lds	r31, 0x0100
    1836:	30 97       	sbiw	r30, 0x00	; 0
    1838:	09 f0       	breq	.+2      	; 0x183c <__vector_5+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH2]();
    183a:	09 95       	icall
	}
	else
	{
		
	}
}
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <main>:
}


int main(void)
{
	sei();
    185e:	78 94       	sei
	Us_Init();
	
	uint16 u16_distance = 0;
	char lcd_buffer[16];
	LCD_init();*/
	Car_SM_Init();
    1860:	0e 94 50 00 	call	0xa0	; 0xa0 <Car_SM_Init>
    while(1)
    {
		Car_SM_Update();
    1864:	0e 94 58 00 	call	0xb0	; 0xb0 <Car_SM_Update>
    1868:	fd cf       	rjmp	.-6      	; 0x1864 <main+0x6>

0000186a <__divsf3>:
    186a:	0c d0       	rcall	.+24     	; 0x1884 <__divsf3x>
    186c:	e6 c0       	rjmp	.+460    	; 0x1a3a <__fp_round>
    186e:	de d0       	rcall	.+444    	; 0x1a2c <__fp_pscB>
    1870:	40 f0       	brcs	.+16     	; 0x1882 <__divsf3+0x18>
    1872:	d5 d0       	rcall	.+426    	; 0x1a1e <__fp_pscA>
    1874:	30 f0       	brcs	.+12     	; 0x1882 <__divsf3+0x18>
    1876:	21 f4       	brne	.+8      	; 0x1880 <__divsf3+0x16>
    1878:	5f 3f       	cpi	r21, 0xFF	; 255
    187a:	19 f0       	breq	.+6      	; 0x1882 <__divsf3+0x18>
    187c:	c7 c0       	rjmp	.+398    	; 0x1a0c <__fp_inf>
    187e:	51 11       	cpse	r21, r1
    1880:	10 c1       	rjmp	.+544    	; 0x1aa2 <__fp_szero>
    1882:	ca c0       	rjmp	.+404    	; 0x1a18 <__fp_nan>

00001884 <__divsf3x>:
    1884:	eb d0       	rcall	.+470    	; 0x1a5c <__fp_split3>
    1886:	98 f3       	brcs	.-26     	; 0x186e <__divsf3+0x4>

00001888 <__divsf3_pse>:
    1888:	99 23       	and	r25, r25
    188a:	c9 f3       	breq	.-14     	; 0x187e <__divsf3+0x14>
    188c:	55 23       	and	r21, r21
    188e:	b1 f3       	breq	.-20     	; 0x187c <__divsf3+0x12>
    1890:	95 1b       	sub	r25, r21
    1892:	55 0b       	sbc	r21, r21
    1894:	bb 27       	eor	r27, r27
    1896:	aa 27       	eor	r26, r26
    1898:	62 17       	cp	r22, r18
    189a:	73 07       	cpc	r23, r19
    189c:	84 07       	cpc	r24, r20
    189e:	38 f0       	brcs	.+14     	; 0x18ae <__divsf3_pse+0x26>
    18a0:	9f 5f       	subi	r25, 0xFF	; 255
    18a2:	5f 4f       	sbci	r21, 0xFF	; 255
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	44 1f       	adc	r20, r20
    18aa:	aa 1f       	adc	r26, r26
    18ac:	a9 f3       	breq	.-22     	; 0x1898 <__divsf3_pse+0x10>
    18ae:	33 d0       	rcall	.+102    	; 0x1916 <__divsf3_pse+0x8e>
    18b0:	0e 2e       	mov	r0, r30
    18b2:	3a f0       	brmi	.+14     	; 0x18c2 <__divsf3_pse+0x3a>
    18b4:	e0 e8       	ldi	r30, 0x80	; 128
    18b6:	30 d0       	rcall	.+96     	; 0x1918 <__divsf3_pse+0x90>
    18b8:	91 50       	subi	r25, 0x01	; 1
    18ba:	50 40       	sbci	r21, 0x00	; 0
    18bc:	e6 95       	lsr	r30
    18be:	00 1c       	adc	r0, r0
    18c0:	ca f7       	brpl	.-14     	; 0x18b4 <__divsf3_pse+0x2c>
    18c2:	29 d0       	rcall	.+82     	; 0x1916 <__divsf3_pse+0x8e>
    18c4:	fe 2f       	mov	r31, r30
    18c6:	27 d0       	rcall	.+78     	; 0x1916 <__divsf3_pse+0x8e>
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	bb 1f       	adc	r27, r27
    18d0:	26 17       	cp	r18, r22
    18d2:	37 07       	cpc	r19, r23
    18d4:	48 07       	cpc	r20, r24
    18d6:	ab 07       	cpc	r26, r27
    18d8:	b0 e8       	ldi	r27, 0x80	; 128
    18da:	09 f0       	breq	.+2      	; 0x18de <__divsf3_pse+0x56>
    18dc:	bb 0b       	sbc	r27, r27
    18de:	80 2d       	mov	r24, r0
    18e0:	bf 01       	movw	r22, r30
    18e2:	ff 27       	eor	r31, r31
    18e4:	93 58       	subi	r25, 0x83	; 131
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255
    18e8:	2a f0       	brmi	.+10     	; 0x18f4 <__divsf3_pse+0x6c>
    18ea:	9e 3f       	cpi	r25, 0xFE	; 254
    18ec:	51 05       	cpc	r21, r1
    18ee:	68 f0       	brcs	.+26     	; 0x190a <__divsf3_pse+0x82>
    18f0:	8d c0       	rjmp	.+282    	; 0x1a0c <__fp_inf>
    18f2:	d7 c0       	rjmp	.+430    	; 0x1aa2 <__fp_szero>
    18f4:	5f 3f       	cpi	r21, 0xFF	; 255
    18f6:	ec f3       	brlt	.-6      	; 0x18f2 <__divsf3_pse+0x6a>
    18f8:	98 3e       	cpi	r25, 0xE8	; 232
    18fa:	dc f3       	brlt	.-10     	; 0x18f2 <__divsf3_pse+0x6a>
    18fc:	86 95       	lsr	r24
    18fe:	77 95       	ror	r23
    1900:	67 95       	ror	r22
    1902:	b7 95       	ror	r27
    1904:	f7 95       	ror	r31
    1906:	9f 5f       	subi	r25, 0xFF	; 255
    1908:	c9 f7       	brne	.-14     	; 0x18fc <__divsf3_pse+0x74>
    190a:	88 0f       	add	r24, r24
    190c:	91 1d       	adc	r25, r1
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	97 f9       	bld	r25, 7
    1914:	08 95       	ret
    1916:	e1 e0       	ldi	r30, 0x01	; 1
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	bb 1f       	adc	r27, r27
    1920:	62 17       	cp	r22, r18
    1922:	73 07       	cpc	r23, r19
    1924:	84 07       	cpc	r24, r20
    1926:	ba 07       	cpc	r27, r26
    1928:	20 f0       	brcs	.+8      	; 0x1932 <__divsf3_pse+0xaa>
    192a:	62 1b       	sub	r22, r18
    192c:	73 0b       	sbc	r23, r19
    192e:	84 0b       	sbc	r24, r20
    1930:	ba 0b       	sbc	r27, r26
    1932:	ee 1f       	adc	r30, r30
    1934:	88 f7       	brcc	.-30     	; 0x1918 <__divsf3_pse+0x90>
    1936:	e0 95       	com	r30
    1938:	08 95       	ret

0000193a <__fixunssfsi>:
    193a:	98 d0       	rcall	.+304    	; 0x1a6c <__fp_splitA>
    193c:	88 f0       	brcs	.+34     	; 0x1960 <__fixunssfsi+0x26>
    193e:	9f 57       	subi	r25, 0x7F	; 127
    1940:	90 f0       	brcs	.+36     	; 0x1966 <__fixunssfsi+0x2c>
    1942:	b9 2f       	mov	r27, r25
    1944:	99 27       	eor	r25, r25
    1946:	b7 51       	subi	r27, 0x17	; 23
    1948:	a0 f0       	brcs	.+40     	; 0x1972 <__fixunssfsi+0x38>
    194a:	d1 f0       	breq	.+52     	; 0x1980 <__fixunssfsi+0x46>
    194c:	66 0f       	add	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	1a f0       	brmi	.+6      	; 0x195c <__fixunssfsi+0x22>
    1956:	ba 95       	dec	r27
    1958:	c9 f7       	brne	.-14     	; 0x194c <__fixunssfsi+0x12>
    195a:	12 c0       	rjmp	.+36     	; 0x1980 <__fixunssfsi+0x46>
    195c:	b1 30       	cpi	r27, 0x01	; 1
    195e:	81 f0       	breq	.+32     	; 0x1980 <__fixunssfsi+0x46>
    1960:	9f d0       	rcall	.+318    	; 0x1aa0 <__fp_zero>
    1962:	b1 e0       	ldi	r27, 0x01	; 1
    1964:	08 95       	ret
    1966:	9c c0       	rjmp	.+312    	; 0x1aa0 <__fp_zero>
    1968:	67 2f       	mov	r22, r23
    196a:	78 2f       	mov	r23, r24
    196c:	88 27       	eor	r24, r24
    196e:	b8 5f       	subi	r27, 0xF8	; 248
    1970:	39 f0       	breq	.+14     	; 0x1980 <__fixunssfsi+0x46>
    1972:	b9 3f       	cpi	r27, 0xF9	; 249
    1974:	cc f3       	brlt	.-14     	; 0x1968 <__fixunssfsi+0x2e>
    1976:	86 95       	lsr	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	b3 95       	inc	r27
    197e:	d9 f7       	brne	.-10     	; 0x1976 <__fixunssfsi+0x3c>
    1980:	3e f4       	brtc	.+14     	; 0x1990 <__fixunssfsi+0x56>
    1982:	90 95       	com	r25
    1984:	80 95       	com	r24
    1986:	70 95       	com	r23
    1988:	61 95       	neg	r22
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	8f 4f       	sbci	r24, 0xFF	; 255
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	08 95       	ret

00001992 <__floatunsisf>:
    1992:	e8 94       	clt
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <__floatsisf+0x12>

00001996 <__floatsisf>:
    1996:	97 fb       	bst	r25, 7
    1998:	3e f4       	brtc	.+14     	; 0x19a8 <__floatsisf+0x12>
    199a:	90 95       	com	r25
    199c:	80 95       	com	r24
    199e:	70 95       	com	r23
    19a0:	61 95       	neg	r22
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	8f 4f       	sbci	r24, 0xFF	; 255
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	99 23       	and	r25, r25
    19aa:	a9 f0       	breq	.+42     	; 0x19d6 <__floatsisf+0x40>
    19ac:	f9 2f       	mov	r31, r25
    19ae:	96 e9       	ldi	r25, 0x96	; 150
    19b0:	bb 27       	eor	r27, r27
    19b2:	93 95       	inc	r25
    19b4:	f6 95       	lsr	r31
    19b6:	87 95       	ror	r24
    19b8:	77 95       	ror	r23
    19ba:	67 95       	ror	r22
    19bc:	b7 95       	ror	r27
    19be:	f1 11       	cpse	r31, r1
    19c0:	f8 cf       	rjmp	.-16     	; 0x19b2 <__floatsisf+0x1c>
    19c2:	fa f4       	brpl	.+62     	; 0x1a02 <__floatsisf+0x6c>
    19c4:	bb 0f       	add	r27, r27
    19c6:	11 f4       	brne	.+4      	; 0x19cc <__floatsisf+0x36>
    19c8:	60 ff       	sbrs	r22, 0
    19ca:	1b c0       	rjmp	.+54     	; 0x1a02 <__floatsisf+0x6c>
    19cc:	6f 5f       	subi	r22, 0xFF	; 255
    19ce:	7f 4f       	sbci	r23, 0xFF	; 255
    19d0:	8f 4f       	sbci	r24, 0xFF	; 255
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	16 c0       	rjmp	.+44     	; 0x1a02 <__floatsisf+0x6c>
    19d6:	88 23       	and	r24, r24
    19d8:	11 f0       	breq	.+4      	; 0x19de <__floatsisf+0x48>
    19da:	96 e9       	ldi	r25, 0x96	; 150
    19dc:	11 c0       	rjmp	.+34     	; 0x1a00 <__floatsisf+0x6a>
    19de:	77 23       	and	r23, r23
    19e0:	21 f0       	breq	.+8      	; 0x19ea <__floatsisf+0x54>
    19e2:	9e e8       	ldi	r25, 0x8E	; 142
    19e4:	87 2f       	mov	r24, r23
    19e6:	76 2f       	mov	r23, r22
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <__floatsisf+0x5e>
    19ea:	66 23       	and	r22, r22
    19ec:	71 f0       	breq	.+28     	; 0x1a0a <__floatsisf+0x74>
    19ee:	96 e8       	ldi	r25, 0x86	; 134
    19f0:	86 2f       	mov	r24, r22
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	2a f0       	brmi	.+10     	; 0x1a02 <__floatsisf+0x6c>
    19f8:	9a 95       	dec	r25
    19fa:	66 0f       	add	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	da f7       	brpl	.-10     	; 0x19f8 <__floatsisf+0x62>
    1a02:	88 0f       	add	r24, r24
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	97 f9       	bld	r25, 7
    1a0a:	08 95       	ret

00001a0c <__fp_inf>:
    1a0c:	97 f9       	bld	r25, 7
    1a0e:	9f 67       	ori	r25, 0x7F	; 127
    1a10:	80 e8       	ldi	r24, 0x80	; 128
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	08 95       	ret

00001a18 <__fp_nan>:
    1a18:	9f ef       	ldi	r25, 0xFF	; 255
    1a1a:	80 ec       	ldi	r24, 0xC0	; 192
    1a1c:	08 95       	ret

00001a1e <__fp_pscA>:
    1a1e:	00 24       	eor	r0, r0
    1a20:	0a 94       	dec	r0
    1a22:	16 16       	cp	r1, r22
    1a24:	17 06       	cpc	r1, r23
    1a26:	18 06       	cpc	r1, r24
    1a28:	09 06       	cpc	r0, r25
    1a2a:	08 95       	ret

00001a2c <__fp_pscB>:
    1a2c:	00 24       	eor	r0, r0
    1a2e:	0a 94       	dec	r0
    1a30:	12 16       	cp	r1, r18
    1a32:	13 06       	cpc	r1, r19
    1a34:	14 06       	cpc	r1, r20
    1a36:	05 06       	cpc	r0, r21
    1a38:	08 95       	ret

00001a3a <__fp_round>:
    1a3a:	09 2e       	mov	r0, r25
    1a3c:	03 94       	inc	r0
    1a3e:	00 0c       	add	r0, r0
    1a40:	11 f4       	brne	.+4      	; 0x1a46 <__fp_round+0xc>
    1a42:	88 23       	and	r24, r24
    1a44:	52 f0       	brmi	.+20     	; 0x1a5a <__fp_round+0x20>
    1a46:	bb 0f       	add	r27, r27
    1a48:	40 f4       	brcc	.+16     	; 0x1a5a <__fp_round+0x20>
    1a4a:	bf 2b       	or	r27, r31
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <__fp_round+0x18>
    1a4e:	60 ff       	sbrs	r22, 0
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <__fp_round+0x20>
    1a52:	6f 5f       	subi	r22, 0xFF	; 255
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	8f 4f       	sbci	r24, 0xFF	; 255
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	08 95       	ret

00001a5c <__fp_split3>:
    1a5c:	57 fd       	sbrc	r21, 7
    1a5e:	90 58       	subi	r25, 0x80	; 128
    1a60:	44 0f       	add	r20, r20
    1a62:	55 1f       	adc	r21, r21
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <__fp_splitA+0x10>
    1a66:	5f 3f       	cpi	r21, 0xFF	; 255
    1a68:	71 f0       	breq	.+28     	; 0x1a86 <__fp_splitA+0x1a>
    1a6a:	47 95       	ror	r20

00001a6c <__fp_splitA>:
    1a6c:	88 0f       	add	r24, r24
    1a6e:	97 fb       	bst	r25, 7
    1a70:	99 1f       	adc	r25, r25
    1a72:	61 f0       	breq	.+24     	; 0x1a8c <__fp_splitA+0x20>
    1a74:	9f 3f       	cpi	r25, 0xFF	; 255
    1a76:	79 f0       	breq	.+30     	; 0x1a96 <__fp_splitA+0x2a>
    1a78:	87 95       	ror	r24
    1a7a:	08 95       	ret
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	14 06       	cpc	r1, r20
    1a82:	55 1f       	adc	r21, r21
    1a84:	f2 cf       	rjmp	.-28     	; 0x1a6a <__fp_split3+0xe>
    1a86:	46 95       	lsr	r20
    1a88:	f1 df       	rcall	.-30     	; 0x1a6c <__fp_splitA>
    1a8a:	08 c0       	rjmp	.+16     	; 0x1a9c <__fp_splitA+0x30>
    1a8c:	16 16       	cp	r1, r22
    1a8e:	17 06       	cpc	r1, r23
    1a90:	18 06       	cpc	r1, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	f1 cf       	rjmp	.-30     	; 0x1a78 <__fp_splitA+0xc>
    1a96:	86 95       	lsr	r24
    1a98:	71 05       	cpc	r23, r1
    1a9a:	61 05       	cpc	r22, r1
    1a9c:	08 94       	sec
    1a9e:	08 95       	ret

00001aa0 <__fp_zero>:
    1aa0:	e8 94       	clt

00001aa2 <__fp_szero>:
    1aa2:	bb 27       	eor	r27, r27
    1aa4:	66 27       	eor	r22, r22
    1aa6:	77 27       	eor	r23, r23
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	97 f9       	bld	r25, 7
    1aac:	08 95       	ret

00001aae <__mulsi3>:
    1aae:	db 01       	movw	r26, r22
    1ab0:	8f 93       	push	r24
    1ab2:	9f 93       	push	r25
    1ab4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__muluhisi3>
    1ab8:	bf 91       	pop	r27
    1aba:	af 91       	pop	r26
    1abc:	a2 9f       	mul	r26, r18
    1abe:	80 0d       	add	r24, r0
    1ac0:	91 1d       	adc	r25, r1
    1ac2:	a3 9f       	mul	r26, r19
    1ac4:	90 0d       	add	r25, r0
    1ac6:	b2 9f       	mul	r27, r18
    1ac8:	90 0d       	add	r25, r0
    1aca:	11 24       	eor	r1, r1
    1acc:	08 95       	ret

00001ace <__divmodhi4>:
    1ace:	97 fb       	bst	r25, 7
    1ad0:	07 2e       	mov	r0, r23
    1ad2:	16 f4       	brtc	.+4      	; 0x1ad8 <__divmodhi4+0xa>
    1ad4:	00 94       	com	r0
    1ad6:	07 d0       	rcall	.+14     	; 0x1ae6 <__divmodhi4_neg1>
    1ad8:	77 fd       	sbrc	r23, 7
    1ada:	09 d0       	rcall	.+18     	; 0x1aee <__divmodhi4_neg2>
    1adc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodhi4>
    1ae0:	07 fc       	sbrc	r0, 7
    1ae2:	05 d0       	rcall	.+10     	; 0x1aee <__divmodhi4_neg2>
    1ae4:	3e f4       	brtc	.+14     	; 0x1af4 <__divmodhi4_exit>

00001ae6 <__divmodhi4_neg1>:
    1ae6:	90 95       	com	r25
    1ae8:	81 95       	neg	r24
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	08 95       	ret

00001aee <__divmodhi4_neg2>:
    1aee:	70 95       	com	r23
    1af0:	61 95       	neg	r22
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255

00001af4 <__divmodhi4_exit>:
    1af4:	08 95       	ret

00001af6 <__udivmodsi4>:
    1af6:	a1 e2       	ldi	r26, 0x21	; 33
    1af8:	1a 2e       	mov	r1, r26
    1afa:	aa 1b       	sub	r26, r26
    1afc:	bb 1b       	sub	r27, r27
    1afe:	fd 01       	movw	r30, r26
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <__udivmodsi4_ep>

00001b02 <__udivmodsi4_loop>:
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	ee 1f       	adc	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	a2 17       	cp	r26, r18
    1b0c:	b3 07       	cpc	r27, r19
    1b0e:	e4 07       	cpc	r30, r20
    1b10:	f5 07       	cpc	r31, r21
    1b12:	20 f0       	brcs	.+8      	; 0x1b1c <__udivmodsi4_ep>
    1b14:	a2 1b       	sub	r26, r18
    1b16:	b3 0b       	sbc	r27, r19
    1b18:	e4 0b       	sbc	r30, r20
    1b1a:	f5 0b       	sbc	r31, r21

00001b1c <__udivmodsi4_ep>:
    1b1c:	66 1f       	adc	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	88 1f       	adc	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	1a 94       	dec	r1
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <__udivmodsi4_loop>
    1b28:	60 95       	com	r22
    1b2a:	70 95       	com	r23
    1b2c:	80 95       	com	r24
    1b2e:	90 95       	com	r25
    1b30:	9b 01       	movw	r18, r22
    1b32:	ac 01       	movw	r20, r24
    1b34:	bd 01       	movw	r22, r26
    1b36:	cf 01       	movw	r24, r30
    1b38:	08 95       	ret

00001b3a <__tablejump2__>:
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31

00001b3e <__tablejump__>:
    1b3e:	05 90       	lpm	r0, Z+
    1b40:	f4 91       	lpm	r31, Z
    1b42:	e0 2d       	mov	r30, r0
    1b44:	09 94       	ijmp

00001b46 <__muluhisi3>:
    1b46:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__umulhisi3>
    1b4a:	a5 9f       	mul	r26, r21
    1b4c:	90 0d       	add	r25, r0
    1b4e:	b4 9f       	mul	r27, r20
    1b50:	90 0d       	add	r25, r0
    1b52:	a4 9f       	mul	r26, r20
    1b54:	80 0d       	add	r24, r0
    1b56:	91 1d       	adc	r25, r1
    1b58:	11 24       	eor	r1, r1
    1b5a:	08 95       	ret

00001b5c <__udivmodhi4>:
    1b5c:	aa 1b       	sub	r26, r26
    1b5e:	bb 1b       	sub	r27, r27
    1b60:	51 e1       	ldi	r21, 0x11	; 17
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <__udivmodhi4_ep>

00001b64 <__udivmodhi4_loop>:
    1b64:	aa 1f       	adc	r26, r26
    1b66:	bb 1f       	adc	r27, r27
    1b68:	a6 17       	cp	r26, r22
    1b6a:	b7 07       	cpc	r27, r23
    1b6c:	10 f0       	brcs	.+4      	; 0x1b72 <__udivmodhi4_ep>
    1b6e:	a6 1b       	sub	r26, r22
    1b70:	b7 0b       	sbc	r27, r23

00001b72 <__udivmodhi4_ep>:
    1b72:	88 1f       	adc	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	5a 95       	dec	r21
    1b78:	a9 f7       	brne	.-22     	; 0x1b64 <__udivmodhi4_loop>
    1b7a:	80 95       	com	r24
    1b7c:	90 95       	com	r25
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	08 95       	ret

00001b84 <__umulhisi3>:
    1b84:	a2 9f       	mul	r26, r18
    1b86:	b0 01       	movw	r22, r0
    1b88:	b3 9f       	mul	r27, r19
    1b8a:	c0 01       	movw	r24, r0
    1b8c:	a3 9f       	mul	r26, r19
    1b8e:	70 0d       	add	r23, r0
    1b90:	81 1d       	adc	r24, r1
    1b92:	11 24       	eor	r1, r1
    1b94:	91 1d       	adc	r25, r1
    1b96:	b2 9f       	mul	r27, r18
    1b98:	70 0d       	add	r23, r0
    1b9a:	81 1d       	adc	r24, r1
    1b9c:	11 24       	eor	r1, r1
    1b9e:	91 1d       	adc	r25, r1
    1ba0:	08 95       	ret

00001ba2 <__itoa_ncheck>:
    1ba2:	bb 27       	eor	r27, r27
    1ba4:	4a 30       	cpi	r20, 0x0A	; 10
    1ba6:	31 f4       	brne	.+12     	; 0x1bb4 <__itoa_ncheck+0x12>
    1ba8:	99 23       	and	r25, r25
    1baa:	22 f4       	brpl	.+8      	; 0x1bb4 <__itoa_ncheck+0x12>
    1bac:	bd e2       	ldi	r27, 0x2D	; 45
    1bae:	90 95       	com	r25
    1bb0:	81 95       	neg	r24
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__utoa_common>

00001bb8 <__utoa_ncheck>:
    1bb8:	bb 27       	eor	r27, r27

00001bba <__utoa_common>:
    1bba:	fb 01       	movw	r30, r22
    1bbc:	55 27       	eor	r21, r21
    1bbe:	aa 27       	eor	r26, r26
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	aa 1f       	adc	r26, r26
    1bc6:	a4 17       	cp	r26, r20
    1bc8:	10 f0       	brcs	.+4      	; 0x1bce <__utoa_common+0x14>
    1bca:	a4 1b       	sub	r26, r20
    1bcc:	83 95       	inc	r24
    1bce:	50 51       	subi	r21, 0x10	; 16
    1bd0:	b9 f7       	brne	.-18     	; 0x1bc0 <__utoa_common+0x6>
    1bd2:	a0 5d       	subi	r26, 0xD0	; 208
    1bd4:	aa 33       	cpi	r26, 0x3A	; 58
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <__utoa_common+0x20>
    1bd8:	a9 5d       	subi	r26, 0xD9	; 217
    1bda:	a1 93       	st	Z+, r26
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	79 f7       	brne	.-34     	; 0x1bbe <__utoa_common+0x4>
    1be0:	b1 11       	cpse	r27, r1
    1be2:	b1 93       	st	Z+, r27
    1be4:	11 92       	st	Z+, r1
    1be6:	cb 01       	movw	r24, r22
    1be8:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <strrev>

00001bec <strrev>:
    1bec:	dc 01       	movw	r26, r24
    1bee:	fc 01       	movw	r30, r24
    1bf0:	67 2f       	mov	r22, r23
    1bf2:	71 91       	ld	r23, Z+
    1bf4:	77 23       	and	r23, r23
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <strrev+0x4>
    1bf8:	32 97       	sbiw	r30, 0x02	; 2
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <strrev+0x18>
    1bfc:	7c 91       	ld	r23, X
    1bfe:	6d 93       	st	X+, r22
    1c00:	70 83       	st	Z, r23
    1c02:	62 91       	ld	r22, -Z
    1c04:	ae 17       	cp	r26, r30
    1c06:	bf 07       	cpc	r27, r31
    1c08:	c8 f3       	brcs	.-14     	; 0x1bfc <strrev+0x10>
    1c0a:	08 95       	ret

00001c0c <_exit>:
    1c0c:	f8 94       	cli

00001c0e <__stop_program>:
    1c0e:	ff cf       	rjmp	.-2      	; 0x1c0e <__stop_program>
